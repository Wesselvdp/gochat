(function(){"use strict";const te=(e,t)=>t.some(n=>e instanceof n);let Oe,xe;function wt(){return Oe||(Oe=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function gt(){return xe||(xe=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const ne=new WeakMap,re=new WeakMap,$=new WeakMap;function bt(e){const t=new Promise((n,r)=>{const s=()=>{e.removeEventListener("success",i),e.removeEventListener("error",o)},i=()=>{n(L(e.result)),s()},o=()=>{r(e.error),s()};e.addEventListener("success",i),e.addEventListener("error",o)});return $.set(t,e),t}function Et(e){if(ne.has(e))return;const t=new Promise((n,r)=>{const s=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",o),e.removeEventListener("abort",o)},i=()=>{n(),s()},o=()=>{r(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",i),e.addEventListener("error",o),e.addEventListener("abort",o)});ne.set(e,t)}let se={get(e,t,n){if(e instanceof IDBTransaction){if(t==="done")return ne.get(e);if(t==="store")return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return L(e[t])},set(e,t,n){return e[t]=n,!0},has(e,t){return e instanceof IDBTransaction&&(t==="done"||t==="store")?!0:t in e}};function Ae(e){se=e(se)}function St(e){return gt().includes(e)?function(...t){return e.apply(oe(this),t),L(this.request)}:function(...t){return L(e.apply(oe(this),t))}}function Rt(e){return typeof e=="function"?St(e):(e instanceof IDBTransaction&&Et(e),te(e,wt())?new Proxy(e,se):e)}function L(e){if(e instanceof IDBRequest)return bt(e);if(re.has(e))return re.get(e);const t=Rt(e);return t!==e&&(re.set(e,t),$.set(t,e)),t}const oe=e=>$.get(e);function Tt(e,t,{blocked:n,upgrade:r,blocking:s,terminated:i}={}){const o=indexedDB.open(e,t),c=L(o);return r&&o.addEventListener("upgradeneeded",l=>{r(L(o.result),l.oldVersion,l.newVersion,L(o.transaction),l)}),n&&o.addEventListener("blocked",l=>n(l.oldVersion,l.newVersion,l)),c.then(l=>{i&&l.addEventListener("close",()=>i()),s&&l.addEventListener("versionchange",u=>s(u.oldVersion,u.newVersion,u))}).catch(()=>{}),c}const Ot=["get","getKey","getAll","getAllKeys","count"],xt=["put","add","delete","clear"],ie=new Map;function Ce(e,t){if(!(e instanceof IDBDatabase&&!(t in e)&&typeof t=="string"))return;if(ie.get(t))return ie.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,s=xt.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!(s||Ot.includes(n)))return;const i=async function(o,...c){const l=this.transaction(o,s?"readwrite":"readonly");let u=l.store;return r&&(u=u.index(c.shift())),(await Promise.all([u[n](...c),s&&l.done]))[0]};return ie.set(t,i),i}Ae(e=>({...e,get:(t,n,r)=>Ce(t,n)||e.get(t,n,r),has:(t,n)=>!!Ce(t,n)||e.has(t,n)}));const At=["continue","continuePrimaryKey","advance"],Pe={},ae=new WeakMap,De=new WeakMap,Ct={get(e,t){if(!At.includes(t))return e[t];let n=Pe[t];return n||(n=Pe[t]=function(...r){ae.set(this,De.get(this)[t](...r))}),n}};async function*Pt(...e){let t=this;if(t instanceof IDBCursor||(t=await t.openCursor(...e)),!t)return;t=t;const n=new Proxy(t,Ct);for(De.set(n,t),$.set(n,oe(t));t;)yield n,t=await(ae.get(n)||t.continue()),ae.delete(n)}function Ne(e,t){return t===Symbol.asyncIterator&&te(e,[IDBIndex,IDBObjectStore,IDBCursor])||t==="iterate"&&te(e,[IDBIndex,IDBObjectStore])}Ae(e=>({...e,get(t,n,r){return Ne(t,n)?Pt:e.get(t,n,r)},has(t,n){return Ne(t,n)||e.has(t,n)}}));const Dt="useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";let Nt=(e=21)=>{let t="",n=crypto.getRandomValues(new Uint8Array(e));for(;e--;)t+=Dt[n[e]&63];return t};async function v(){return Tt("goChat",1,{upgrade(e){e.createObjectStore("conversations",{keyPath:"id",autoIncrement:!0}),e.createObjectStore("messages",{keyPath:"id",autoIncrement:!0}).createIndex("conversationId","conversationId")}})}async function Bt(e){const t=await v(),n={id:e,date:new Date("2019-01-01"),title:"New conversation"};return await t.add("conversations",n),n}async function Lt(e){return(await v()).get("conversations",e)}async function vt(e){return(await v()).put("conversations",e)}async function Ft(e){return(await v()).delete("conversations",e)}async function Mt(){return(await(await v()).getAll("conversations")).sort((n,r)=>r.date.getTime()-n.date.getTime())}async function _t(e,t){const n=await v(),r={id:Nt(),timestamp:Date.now(),conversationId:e,...t};return await n.add("messages",r),r}async function It(e){const t=await v();try{const n=await t.getAllFromIndex("messages","conversationId",e);return n.sort((r,s)=>r.timestamp-s.timestamp),n}catch(n){return console.error("Error fetching messages:",n),[]}finally{t.close()}}const A={messages:{create:_t,getByConversation:It},conversation:{get:Lt,create:Bt,list:Mt,update:vt,delete:Ft}};function Be(e,t){return function(){return e.apply(t,arguments)}}const{toString:Ut}=Object.prototype,{getPrototypeOf:ce}=Object,z=(e=>t=>{const n=Ut.call(t);return e[n]||(e[n]=n.slice(8,-1).toLowerCase())})(Object.create(null)),P=e=>(e=e.toLowerCase(),t=>z(t)===e),J=e=>t=>typeof t===e,{isArray:U}=Array,j=J("undefined");function kt(e){return e!==null&&!j(e)&&e.constructor!==null&&!j(e.constructor)&&C(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const Le=P("ArrayBuffer");function jt(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&Le(e.buffer),t}const qt=J("string"),C=J("function"),ve=J("number"),W=e=>e!==null&&typeof e=="object",Ht=e=>e===!0||e===!1,K=e=>{if(z(e)!=="object")return!1;const t=ce(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},Vt=P("Date"),$t=P("File"),zt=P("Blob"),Jt=P("FileList"),Wt=e=>W(e)&&C(e.pipe),Kt=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||C(e.append)&&((t=z(e))==="formdata"||t==="object"&&C(e.toString)&&e.toString()==="[object FormData]"))},Xt=P("URLSearchParams"),[Gt,Qt,Zt,Yt]=["ReadableStream","Request","Response","Headers"].map(P),en=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function q(e,t,{allOwnKeys:n=!1}={}){if(e===null||typeof e>"u")return;let r,s;if(typeof e!="object"&&(e=[e]),U(e))for(r=0,s=e.length;r<s;r++)t.call(null,e[r],r,e);else{const i=n?Object.getOwnPropertyNames(e):Object.keys(e),o=i.length;let c;for(r=0;r<o;r++)c=i[r],t.call(null,e[c],c,e)}}function Fe(e,t){t=t.toLowerCase();const n=Object.keys(e);let r=n.length,s;for(;r-- >0;)if(s=n[r],t===s.toLowerCase())return s;return null}const F=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global,Me=e=>!j(e)&&e!==F;function ue(){const{caseless:e}=Me(this)&&this||{},t={},n=(r,s)=>{const i=e&&Fe(t,s)||s;K(t[i])&&K(r)?t[i]=ue(t[i],r):K(r)?t[i]=ue({},r):U(r)?t[i]=r.slice():t[i]=r};for(let r=0,s=arguments.length;r<s;r++)arguments[r]&&q(arguments[r],n);return t}const tn=(e,t,n,{allOwnKeys:r}={})=>(q(t,(s,i)=>{n&&C(s)?e[i]=Be(s,n):e[i]=s},{allOwnKeys:r}),e),nn=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),rn=(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},sn=(e,t,n,r)=>{let s,i,o;const c={};if(t=t||{},e==null)return t;do{for(s=Object.getOwnPropertyNames(e),i=s.length;i-- >0;)o=s[i],(!r||r(o,e,t))&&!c[o]&&(t[o]=e[o],c[o]=!0);e=n!==!1&&ce(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},on=(e,t,n)=>{e=String(e),(n===void 0||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return r!==-1&&r===n},an=e=>{if(!e)return null;if(U(e))return e;let t=e.length;if(!ve(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},cn=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&ce(Uint8Array)),un=(e,t)=>{const r=(e&&e[Symbol.iterator]).call(e);let s;for(;(s=r.next())&&!s.done;){const i=s.value;t.call(e,i[0],i[1])}},ln=(e,t)=>{let n;const r=[];for(;(n=e.exec(t))!==null;)r.push(n);return r},fn=P("HTMLFormElement"),dn=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(n,r,s){return r.toUpperCase()+s}),_e=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),hn=P("RegExp"),Ie=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};q(n,(s,i)=>{let o;(o=t(s,i,e))!==!1&&(r[i]=o||s)}),Object.defineProperties(e,r)},pn=e=>{Ie(e,(t,n)=>{if(C(e)&&["arguments","caller","callee"].indexOf(n)!==-1)return!1;const r=e[n];if(C(r)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")})}})},mn=(e,t)=>{const n={},r=s=>{s.forEach(i=>{n[i]=!0})};return U(e)?r(e):r(String(e).split(t)),n},yn=()=>{},wn=(e,t)=>e!=null&&Number.isFinite(e=+e)?e:t,le="abcdefghijklmnopqrstuvwxyz",Ue="0123456789",ke={DIGIT:Ue,ALPHA:le,ALPHA_DIGIT:le+le.toUpperCase()+Ue},gn=(e=16,t=ke.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n};function bn(e){return!!(e&&C(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const En=e=>{const t=new Array(10),n=(r,s)=>{if(W(r)){if(t.indexOf(r)>=0)return;if(!("toJSON"in r)){t[s]=r;const i=U(r)?[]:{};return q(r,(o,c)=>{const l=n(o,s+1);!j(l)&&(i[c]=l)}),t[s]=void 0,i}}return r};return n(e,0)},Sn=P("AsyncFunction"),Rn=e=>e&&(W(e)||C(e))&&C(e.then)&&C(e.catch),je=((e,t)=>e?setImmediate:t?((n,r)=>(F.addEventListener("message",({source:s,data:i})=>{s===F&&i===n&&r.length&&r.shift()()},!1),s=>{r.push(s),F.postMessage(n,"*")}))(`axios@${Math.random()}`,[]):n=>setTimeout(n))(typeof setImmediate=="function",C(F.postMessage)),Tn=typeof queueMicrotask<"u"?queueMicrotask.bind(F):typeof process<"u"&&process.nextTick||je,a={isArray:U,isArrayBuffer:Le,isBuffer:kt,isFormData:Kt,isArrayBufferView:jt,isString:qt,isNumber:ve,isBoolean:Ht,isObject:W,isPlainObject:K,isReadableStream:Gt,isRequest:Qt,isResponse:Zt,isHeaders:Yt,isUndefined:j,isDate:Vt,isFile:$t,isBlob:zt,isRegExp:hn,isFunction:C,isStream:Wt,isURLSearchParams:Xt,isTypedArray:cn,isFileList:Jt,forEach:q,merge:ue,extend:tn,trim:en,stripBOM:nn,inherits:rn,toFlatObject:sn,kindOf:z,kindOfTest:P,endsWith:on,toArray:an,forEachEntry:un,matchAll:ln,isHTMLForm:fn,hasOwnProperty:_e,hasOwnProp:_e,reduceDescriptors:Ie,freezeMethods:pn,toObjectSet:mn,toCamelCase:dn,noop:yn,toFiniteNumber:wn,findKey:Fe,global:F,isContextDefined:Me,ALPHABET:ke,generateString:gn,isSpecCompliantForm:bn,toJSONObject:En,isAsyncFn:Sn,isThenable:Rn,setImmediate:je,asap:Tn};function m(e,t,n,r,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),s&&(this.response=s,this.status=s.status?s.status:null)}a.inherits(m,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:a.toJSONObject(this.config),code:this.code,status:this.status}}});const qe=m.prototype,He={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{He[e]={value:e}}),Object.defineProperties(m,He),Object.defineProperty(qe,"isAxiosError",{value:!0}),m.from=(e,t,n,r,s,i)=>{const o=Object.create(qe);return a.toFlatObject(e,o,function(l){return l!==Error.prototype},c=>c!=="isAxiosError"),m.call(o,e.message,t,n,r,s),o.cause=e,o.name=e.name,i&&Object.assign(o,i),o};const On=null;function fe(e){return a.isPlainObject(e)||a.isArray(e)}function Ve(e){return a.endsWith(e,"[]")?e.slice(0,-2):e}function $e(e,t,n){return e?e.concat(t).map(function(s,i){return s=Ve(s),!n&&i?"["+s+"]":s}).join(n?".":""):t}function xn(e){return a.isArray(e)&&!e.some(fe)}const An=a.toFlatObject(a,{},null,function(t){return/^is[A-Z]/.test(t)});function X(e,t,n){if(!a.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,n=a.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,function(y,p){return!a.isUndefined(p[y])});const r=n.metaTokens,s=n.visitor||f,i=n.dots,o=n.indexes,l=(n.Blob||typeof Blob<"u"&&Blob)&&a.isSpecCompliantForm(t);if(!a.isFunction(s))throw new TypeError("visitor must be a function");function u(h){if(h===null)return"";if(a.isDate(h))return h.toISOString();if(!l&&a.isBlob(h))throw new m("Blob is not supported. Use a Buffer instead.");return a.isArrayBuffer(h)||a.isTypedArray(h)?l&&typeof Blob=="function"?new Blob([h]):Buffer.from(h):h}function f(h,y,p){let g=h;if(h&&!p&&typeof h=="object"){if(a.endsWith(y,"{}"))y=r?y:y.slice(0,-2),h=JSON.stringify(h);else if(a.isArray(h)&&xn(h)||(a.isFileList(h)||a.endsWith(y,"[]"))&&(g=a.toArray(h)))return y=Ve(y),g.forEach(function(R,D){!(a.isUndefined(R)||R===null)&&t.append(o===!0?$e([y],D,i):o===null?y:y+"[]",u(R))}),!1}return fe(h)?!0:(t.append($e(p,y,i),u(h)),!1)}const d=[],w=Object.assign(An,{defaultVisitor:f,convertValue:u,isVisitable:fe});function E(h,y){if(!a.isUndefined(h)){if(d.indexOf(h)!==-1)throw Error("Circular reference detected in "+y.join("."));d.push(h),a.forEach(h,function(g,S){(!(a.isUndefined(g)||g===null)&&s.call(t,g,a.isString(S)?S.trim():S,y,w))===!0&&E(g,y?y.concat(S):[S])}),d.pop()}}if(!a.isObject(e))throw new TypeError("data must be an object");return E(e),t}function ze(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(r){return t[r]})}function de(e,t){this._pairs=[],e&&X(e,this,t)}const Je=de.prototype;Je.append=function(t,n){this._pairs.push([t,n])},Je.toString=function(t){const n=t?function(r){return t.call(this,r,ze)}:ze;return this._pairs.map(function(s){return n(s[0])+"="+n(s[1])},"").join("&")};function Cn(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function We(e,t,n){if(!t)return e;const r=n&&n.encode||Cn,s=n&&n.serialize;let i;if(s?i=s(t,n):i=a.isURLSearchParams(t)?t.toString():new de(t,n).toString(r),i){const o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+i}return e}class Ke{constructor(){this.handlers=[]}use(t,n,r){return this.handlers.push({fulfilled:t,rejected:n,synchronous:r?r.synchronous:!1,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){a.forEach(this.handlers,function(r){r!==null&&t(r)})}}const Xe={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Pn={isBrowser:!0,classes:{URLSearchParams:typeof URLSearchParams<"u"?URLSearchParams:de,FormData:typeof FormData<"u"?FormData:null,Blob:typeof Blob<"u"?Blob:null},protocols:["http","https","file","blob","url","data"]},he=typeof window<"u"&&typeof document<"u",pe=typeof navigator=="object"&&navigator||void 0,Dn=he&&(!pe||["ReactNative","NativeScript","NS"].indexOf(pe.product)<0),Nn=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function",Bn=he&&window.location.href||"http://localhost",T={...Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv:he,hasStandardBrowserEnv:Dn,hasStandardBrowserWebWorkerEnv:Nn,navigator:pe,origin:Bn},Symbol.toStringTag,{value:"Module"})),...Pn};function Ln(e,t){return X(e,new T.classes.URLSearchParams,Object.assign({visitor:function(n,r,s,i){return T.isNode&&a.isBuffer(n)?(this.append(r,n.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)}},t))}function vn(e){return a.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function Fn(e){const t={},n=Object.keys(e);let r;const s=n.length;let i;for(r=0;r<s;r++)i=n[r],t[i]=e[i];return t}function Ge(e){function t(n,r,s,i){let o=n[i++];if(o==="__proto__")return!0;const c=Number.isFinite(+o),l=i>=n.length;return o=!o&&a.isArray(s)?s.length:o,l?(a.hasOwnProp(s,o)?s[o]=[s[o],r]:s[o]=r,!c):((!s[o]||!a.isObject(s[o]))&&(s[o]=[]),t(n,r,s[o],i)&&a.isArray(s[o])&&(s[o]=Fn(s[o])),!c)}if(a.isFormData(e)&&a.isFunction(e.entries)){const n={};return a.forEachEntry(e,(r,s)=>{t(vn(r),s,n,0)}),n}return null}function Mn(e,t,n){if(a.isString(e))try{return(t||JSON.parse)(e),a.trim(e)}catch(r){if(r.name!=="SyntaxError")throw r}return(n||JSON.stringify)(e)}const H={transitional:Xe,adapter:["xhr","http","fetch"],transformRequest:[function(t,n){const r=n.getContentType()||"",s=r.indexOf("application/json")>-1,i=a.isObject(t);if(i&&a.isHTMLForm(t)&&(t=new FormData(t)),a.isFormData(t))return s?JSON.stringify(Ge(t)):t;if(a.isArrayBuffer(t)||a.isBuffer(t)||a.isStream(t)||a.isFile(t)||a.isBlob(t)||a.isReadableStream(t))return t;if(a.isArrayBufferView(t))return t.buffer;if(a.isURLSearchParams(t))return n.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let c;if(i){if(r.indexOf("application/x-www-form-urlencoded")>-1)return Ln(t,this.formSerializer).toString();if((c=a.isFileList(t))||r.indexOf("multipart/form-data")>-1){const l=this.env&&this.env.FormData;return X(c?{"files[]":t}:t,l&&new l,this.formSerializer)}}return i||s?(n.setContentType("application/json",!1),Mn(t)):t}],transformResponse:[function(t){const n=this.transitional||H.transitional,r=n&&n.forcedJSONParsing,s=this.responseType==="json";if(a.isResponse(t)||a.isReadableStream(t))return t;if(t&&a.isString(t)&&(r&&!this.responseType||s)){const o=!(n&&n.silentJSONParsing)&&s;try{return JSON.parse(t)}catch(c){if(o)throw c.name==="SyntaxError"?m.from(c,m.ERR_BAD_RESPONSE,this,null,this.response):c}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:T.classes.FormData,Blob:T.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};a.forEach(["delete","get","head","post","put","patch"],e=>{H.headers[e]={}});const _n=a.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),In=e=>{const t={};let n,r,s;return e&&e.split(`
`).forEach(function(o){s=o.indexOf(":"),n=o.substring(0,s).trim().toLowerCase(),r=o.substring(s+1).trim(),!(!n||t[n]&&_n[n])&&(n==="set-cookie"?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)}),t},Qe=Symbol("internals");function V(e){return e&&String(e).trim().toLowerCase()}function G(e){return e===!1||e==null?e:a.isArray(e)?e.map(G):String(e)}function Un(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}const kn=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function me(e,t,n,r,s){if(a.isFunction(r))return r.call(this,t,n);if(s&&(t=n),!!a.isString(t)){if(a.isString(r))return t.indexOf(r)!==-1;if(a.isRegExp(r))return r.test(t)}}function jn(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,n,r)=>n.toUpperCase()+r)}function qn(e,t){const n=a.toCamelCase(" "+t);["get","set","has"].forEach(r=>{Object.defineProperty(e,r+n,{value:function(s,i,o){return this[r].call(this,t,s,i,o)},configurable:!0})})}class O{constructor(t){t&&this.set(t)}set(t,n,r){const s=this;function i(c,l,u){const f=V(l);if(!f)throw new Error("header name must be a non-empty string");const d=a.findKey(s,f);(!d||s[d]===void 0||u===!0||u===void 0&&s[d]!==!1)&&(s[d||l]=G(c))}const o=(c,l)=>a.forEach(c,(u,f)=>i(u,f,l));if(a.isPlainObject(t)||t instanceof this.constructor)o(t,n);else if(a.isString(t)&&(t=t.trim())&&!kn(t))o(In(t),n);else if(a.isHeaders(t))for(const[c,l]of t.entries())i(l,c,r);else t!=null&&i(n,t,r);return this}get(t,n){if(t=V(t),t){const r=a.findKey(this,t);if(r){const s=this[r];if(!n)return s;if(n===!0)return Un(s);if(a.isFunction(n))return n.call(this,s,r);if(a.isRegExp(n))return n.exec(s);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,n){if(t=V(t),t){const r=a.findKey(this,t);return!!(r&&this[r]!==void 0&&(!n||me(this,this[r],r,n)))}return!1}delete(t,n){const r=this;let s=!1;function i(o){if(o=V(o),o){const c=a.findKey(r,o);c&&(!n||me(r,r[c],c,n))&&(delete r[c],s=!0)}}return a.isArray(t)?t.forEach(i):i(t),s}clear(t){const n=Object.keys(this);let r=n.length,s=!1;for(;r--;){const i=n[r];(!t||me(this,this[i],i,t,!0))&&(delete this[i],s=!0)}return s}normalize(t){const n=this,r={};return a.forEach(this,(s,i)=>{const o=a.findKey(r,i);if(o){n[o]=G(s),delete n[i];return}const c=t?jn(i):String(i).trim();c!==i&&delete n[i],n[c]=G(s),r[c]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const n=Object.create(null);return a.forEach(this,(r,s)=>{r!=null&&r!==!1&&(n[s]=t&&a.isArray(r)?r.join(", "):r)}),n}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,n])=>t+": "+n).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...n){const r=new this(t);return n.forEach(s=>r.set(s)),r}static accessor(t){const r=(this[Qe]=this[Qe]={accessors:{}}).accessors,s=this.prototype;function i(o){const c=V(o);r[c]||(qn(s,o),r[c]=!0)}return a.isArray(t)?t.forEach(i):i(t),this}}O.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),a.reduceDescriptors(O.prototype,({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(r){this[n]=r}}}),a.freezeMethods(O);function ye(e,t){const n=this||H,r=t||n,s=O.from(r.headers);let i=r.data;return a.forEach(e,function(c){i=c.call(n,i,s.normalize(),t?t.status:void 0)}),s.normalize(),i}function Ze(e){return!!(e&&e.__CANCEL__)}function k(e,t,n){m.call(this,e??"canceled",m.ERR_CANCELED,t,n),this.name="CanceledError"}a.inherits(k,m,{__CANCEL__:!0});function Ye(e,t,n){const r=n.config.validateStatus;!n.status||!r||r(n.status)?e(n):t(new m("Request failed with status code "+n.status,[m.ERR_BAD_REQUEST,m.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}function Hn(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function Vn(e,t){e=e||10;const n=new Array(e),r=new Array(e);let s=0,i=0,o;return t=t!==void 0?t:1e3,function(l){const u=Date.now(),f=r[i];o||(o=u),n[s]=l,r[s]=u;let d=i,w=0;for(;d!==s;)w+=n[d++],d=d%e;if(s=(s+1)%e,s===i&&(i=(i+1)%e),u-o<t)return;const E=f&&u-f;return E?Math.round(w*1e3/E):void 0}}function $n(e,t){let n=0,r=1e3/t,s,i;const o=(u,f=Date.now())=>{n=f,s=null,i&&(clearTimeout(i),i=null),e.apply(null,u)};return[(...u)=>{const f=Date.now(),d=f-n;d>=r?o(u,f):(s=u,i||(i=setTimeout(()=>{i=null,o(s)},r-d)))},()=>s&&o(s)]}const Q=(e,t,n=3)=>{let r=0;const s=Vn(50,250);return $n(i=>{const o=i.loaded,c=i.lengthComputable?i.total:void 0,l=o-r,u=s(l),f=o<=c;r=o;const d={loaded:o,total:c,progress:c?o/c:void 0,bytes:l,rate:u||void 0,estimated:u&&c&&f?(c-o)/u:void 0,event:i,lengthComputable:c!=null,[t?"download":"upload"]:!0};e(d)},n)},et=(e,t)=>{const n=e!=null;return[r=>t[0]({lengthComputable:n,total:e,loaded:r}),t[1]]},tt=e=>(...t)=>a.asap(()=>e(...t)),zn=T.hasStandardBrowserEnv?function(){const t=T.navigator&&/(msie|trident)/i.test(T.navigator.userAgent),n=document.createElement("a");let r;function s(i){let o=i;return t&&(n.setAttribute("href",o),o=n.href),n.setAttribute("href",o),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:n.pathname.charAt(0)==="/"?n.pathname:"/"+n.pathname}}return r=s(window.location.href),function(o){const c=a.isString(o)?s(o):o;return c.protocol===r.protocol&&c.host===r.host}}():function(){return function(){return!0}}(),Jn=T.hasStandardBrowserEnv?{write(e,t,n,r,s,i){const o=[e+"="+encodeURIComponent(t)];a.isNumber(n)&&o.push("expires="+new Date(n).toGMTString()),a.isString(r)&&o.push("path="+r),a.isString(s)&&o.push("domain="+s),i===!0&&o.push("secure"),document.cookie=o.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function Wn(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function Kn(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}function nt(e,t){return e&&!Wn(t)?Kn(e,t):t}const rt=e=>e instanceof O?{...e}:e;function M(e,t){t=t||{};const n={};function r(u,f,d){return a.isPlainObject(u)&&a.isPlainObject(f)?a.merge.call({caseless:d},u,f):a.isPlainObject(f)?a.merge({},f):a.isArray(f)?f.slice():f}function s(u,f,d){if(a.isUndefined(f)){if(!a.isUndefined(u))return r(void 0,u,d)}else return r(u,f,d)}function i(u,f){if(!a.isUndefined(f))return r(void 0,f)}function o(u,f){if(a.isUndefined(f)){if(!a.isUndefined(u))return r(void 0,u)}else return r(void 0,f)}function c(u,f,d){if(d in t)return r(u,f);if(d in e)return r(void 0,u)}const l={url:i,method:i,data:i,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:c,headers:(u,f)=>s(rt(u),rt(f),!0)};return a.forEach(Object.keys(Object.assign({},e,t)),function(f){const d=l[f]||s,w=d(e[f],t[f],f);a.isUndefined(w)&&d!==c||(n[f]=w)}),n}const st=e=>{const t=M({},e);let{data:n,withXSRFToken:r,xsrfHeaderName:s,xsrfCookieName:i,headers:o,auth:c}=t;t.headers=o=O.from(o),t.url=We(nt(t.baseURL,t.url),e.params,e.paramsSerializer),c&&o.set("Authorization","Basic "+btoa((c.username||"")+":"+(c.password?unescape(encodeURIComponent(c.password)):"")));let l;if(a.isFormData(n)){if(T.hasStandardBrowserEnv||T.hasStandardBrowserWebWorkerEnv)o.setContentType(void 0);else if((l=o.getContentType())!==!1){const[u,...f]=l?l.split(";").map(d=>d.trim()).filter(Boolean):[];o.setContentType([u||"multipart/form-data",...f].join("; "))}}if(T.hasStandardBrowserEnv&&(r&&a.isFunction(r)&&(r=r(t)),r||r!==!1&&zn(t.url))){const u=s&&i&&Jn.read(i);u&&o.set(s,u)}return t},Xn=typeof XMLHttpRequest<"u"&&function(e){return new Promise(function(n,r){const s=st(e);let i=s.data;const o=O.from(s.headers).normalize();let{responseType:c,onUploadProgress:l,onDownloadProgress:u}=s,f,d,w,E,h;function y(){E&&E(),h&&h(),s.cancelToken&&s.cancelToken.unsubscribe(f),s.signal&&s.signal.removeEventListener("abort",f)}let p=new XMLHttpRequest;p.open(s.method.toUpperCase(),s.url,!0),p.timeout=s.timeout;function g(){if(!p)return;const R=O.from("getAllResponseHeaders"in p&&p.getAllResponseHeaders()),x={data:!c||c==="text"||c==="json"?p.responseText:p.response,status:p.status,statusText:p.statusText,headers:R,config:e,request:p};Ye(function(I){n(I),y()},function(I){r(I),y()},x),p=null}"onloadend"in p?p.onloadend=g:p.onreadystatechange=function(){!p||p.readyState!==4||p.status===0&&!(p.responseURL&&p.responseURL.indexOf("file:")===0)||setTimeout(g)},p.onabort=function(){p&&(r(new m("Request aborted",m.ECONNABORTED,e,p)),p=null)},p.onerror=function(){r(new m("Network Error",m.ERR_NETWORK,e,p)),p=null},p.ontimeout=function(){let D=s.timeout?"timeout of "+s.timeout+"ms exceeded":"timeout exceeded";const x=s.transitional||Xe;s.timeoutErrorMessage&&(D=s.timeoutErrorMessage),r(new m(D,x.clarifyTimeoutError?m.ETIMEDOUT:m.ECONNABORTED,e,p)),p=null},i===void 0&&o.setContentType(null),"setRequestHeader"in p&&a.forEach(o.toJSON(),function(D,x){p.setRequestHeader(x,D)}),a.isUndefined(s.withCredentials)||(p.withCredentials=!!s.withCredentials),c&&c!=="json"&&(p.responseType=s.responseType),u&&([w,h]=Q(u,!0),p.addEventListener("progress",w)),l&&p.upload&&([d,E]=Q(l),p.upload.addEventListener("progress",d),p.upload.addEventListener("loadend",E)),(s.cancelToken||s.signal)&&(f=R=>{p&&(r(!R||R.type?new k(null,e,p):R),p.abort(),p=null)},s.cancelToken&&s.cancelToken.subscribe(f),s.signal&&(s.signal.aborted?f():s.signal.addEventListener("abort",f)));const S=Hn(s.url);if(S&&T.protocols.indexOf(S)===-1){r(new m("Unsupported protocol "+S+":",m.ERR_BAD_REQUEST,e));return}p.send(i||null)})},Gn=(e,t)=>{const{length:n}=e=e?e.filter(Boolean):[];if(t||n){let r=new AbortController,s;const i=function(u){if(!s){s=!0,c();const f=u instanceof Error?u:this.reason;r.abort(f instanceof m?f:new k(f instanceof Error?f.message:f))}};let o=t&&setTimeout(()=>{o=null,i(new m(`timeout ${t} of ms exceeded`,m.ETIMEDOUT))},t);const c=()=>{e&&(o&&clearTimeout(o),o=null,e.forEach(u=>{u.unsubscribe?u.unsubscribe(i):u.removeEventListener("abort",i)}),e=null)};e.forEach(u=>u.addEventListener("abort",i));const{signal:l}=r;return l.unsubscribe=()=>a.asap(c),l}},Qn=function*(e,t){let n=e.byteLength;if(!t||n<t){yield e;return}let r=0,s;for(;r<n;)s=r+t,yield e.slice(r,s),r=s},Zn=async function*(e,t){for await(const n of Yn(e))yield*Qn(n,t)},Yn=async function*(e){if(e[Symbol.asyncIterator]){yield*e;return}const t=e.getReader();try{for(;;){const{done:n,value:r}=await t.read();if(n)break;yield r}}finally{await t.cancel()}},ot=(e,t,n,r)=>{const s=Zn(e,t);let i=0,o,c=l=>{o||(o=!0,r&&r(l))};return new ReadableStream({async pull(l){try{const{done:u,value:f}=await s.next();if(u){c(),l.close();return}let d=f.byteLength;if(n){let w=i+=d;n(w)}l.enqueue(new Uint8Array(f))}catch(u){throw c(u),u}},cancel(l){return c(l),s.return()}},{highWaterMark:2})},Z=typeof fetch=="function"&&typeof Request=="function"&&typeof Response=="function",it=Z&&typeof ReadableStream=="function",er=Z&&(typeof TextEncoder=="function"?(e=>t=>e.encode(t))(new TextEncoder):async e=>new Uint8Array(await new Response(e).arrayBuffer())),at=(e,...t)=>{try{return!!e(...t)}catch{return!1}},tr=it&&at(()=>{let e=!1;const t=new Request(T.origin,{body:new ReadableStream,method:"POST",get duplex(){return e=!0,"half"}}).headers.has("Content-Type");return e&&!t}),ct=64*1024,we=it&&at(()=>a.isReadableStream(new Response("").body)),Y={stream:we&&(e=>e.body)};Z&&(e=>{["text","arrayBuffer","blob","formData","stream"].forEach(t=>{!Y[t]&&(Y[t]=a.isFunction(e[t])?n=>n[t]():(n,r)=>{throw new m(`Response type '${t}' is not supported`,m.ERR_NOT_SUPPORT,r)})})})(new Response);const nr=async e=>{if(e==null)return 0;if(a.isBlob(e))return e.size;if(a.isSpecCompliantForm(e))return(await new Request(T.origin,{method:"POST",body:e}).arrayBuffer()).byteLength;if(a.isArrayBufferView(e)||a.isArrayBuffer(e))return e.byteLength;if(a.isURLSearchParams(e)&&(e=e+""),a.isString(e))return(await er(e)).byteLength},rr=async(e,t)=>{const n=a.toFiniteNumber(e.getContentLength());return n??nr(t)},ge={http:On,xhr:Xn,fetch:Z&&(async e=>{let{url:t,method:n,data:r,signal:s,cancelToken:i,timeout:o,onDownloadProgress:c,onUploadProgress:l,responseType:u,headers:f,withCredentials:d="same-origin",fetchOptions:w}=st(e);u=u?(u+"").toLowerCase():"text";let E=Gn([s,i&&i.toAbortSignal()],o),h;const y=E&&E.unsubscribe&&(()=>{E.unsubscribe()});let p;try{if(l&&tr&&n!=="get"&&n!=="head"&&(p=await rr(f,r))!==0){let x=new Request(t,{method:"POST",body:r,duplex:"half"}),B;if(a.isFormData(r)&&(B=x.headers.get("content-type"))&&f.setContentType(B),x.body){const[I,ee]=et(p,Q(tt(l)));r=ot(x.body,ct,I,ee)}}a.isString(d)||(d=d?"include":"omit");const g="credentials"in Request.prototype;h=new Request(t,{...w,signal:E,method:n.toUpperCase(),headers:f.normalize().toJSON(),body:r,duplex:"half",credentials:g?d:void 0});let S=await fetch(h);const R=we&&(u==="stream"||u==="response");if(we&&(c||R&&y)){const x={};["status","statusText","headers"].forEach(yt=>{x[yt]=S[yt]});const B=a.toFiniteNumber(S.headers.get("content-length")),[I,ee]=c&&et(B,Q(tt(c),!0))||[];S=new Response(ot(S.body,ct,I,()=>{ee&&ee(),y&&y()}),x)}u=u||"text";let D=await Y[a.findKey(Y,u)||"text"](S,e);return!R&&y&&y(),await new Promise((x,B)=>{Ye(x,B,{data:D,headers:O.from(S.headers),status:S.status,statusText:S.statusText,config:e,request:h})})}catch(g){throw y&&y(),g&&g.name==="TypeError"&&/fetch/i.test(g.message)?Object.assign(new m("Network Error",m.ERR_NETWORK,e,h),{cause:g.cause||g}):m.from(g,g&&g.code,e,h)}})};a.forEach(ge,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const ut=e=>`- ${e}`,sr=e=>a.isFunction(e)||e===null||e===!1,lt={getAdapter:e=>{e=a.isArray(e)?e:[e];const{length:t}=e;let n,r;const s={};for(let i=0;i<t;i++){n=e[i];let o;if(r=n,!sr(n)&&(r=ge[(o=String(n)).toLowerCase()],r===void 0))throw new m(`Unknown adapter '${o}'`);if(r)break;s[o||"#"+i]=r}if(!r){const i=Object.entries(s).map(([c,l])=>`adapter ${c} `+(l===!1?"is not supported by the environment":"is not available in the build"));let o=t?i.length>1?`since :
`+i.map(ut).join(`
`):" "+ut(i[0]):"as no adapter specified";throw new m("There is no suitable adapter to dispatch the request "+o,"ERR_NOT_SUPPORT")}return r},adapters:ge};function be(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new k(null,e)}function ft(e){return be(e),e.headers=O.from(e.headers),e.data=ye.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),lt.getAdapter(e.adapter||H.adapter)(e).then(function(r){return be(e),r.data=ye.call(e,e.transformResponse,r),r.headers=O.from(r.headers),r},function(r){return Ze(r)||(be(e),r&&r.response&&(r.response.data=ye.call(e,e.transformResponse,r.response),r.response.headers=O.from(r.response.headers))),Promise.reject(r)})}const dt="1.7.7",Ee={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{Ee[e]=function(r){return typeof r===e||"a"+(t<1?"n ":" ")+e}});const ht={};Ee.transitional=function(t,n,r){function s(i,o){return"[Axios v"+dt+"] Transitional option '"+i+"'"+o+(r?". "+r:"")}return(i,o,c)=>{if(t===!1)throw new m(s(o," has been removed"+(n?" in "+n:"")),m.ERR_DEPRECATED);return n&&!ht[o]&&(ht[o]=!0,console.warn(s(o," has been deprecated since v"+n+" and will be removed in the near future"))),t?t(i,o,c):!0}};function or(e,t,n){if(typeof e!="object")throw new m("options must be an object",m.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let s=r.length;for(;s-- >0;){const i=r[s],o=t[i];if(o){const c=e[i],l=c===void 0||o(c,i,e);if(l!==!0)throw new m("option "+i+" must be "+l,m.ERR_BAD_OPTION_VALUE);continue}if(n!==!0)throw new m("Unknown option "+i,m.ERR_BAD_OPTION)}}const Se={assertOptions:or,validators:Ee},N=Se.validators;class _{constructor(t){this.defaults=t,this.interceptors={request:new Ke,response:new Ke}}async request(t,n){try{return await this._request(t,n)}catch(r){if(r instanceof Error){let s;Error.captureStackTrace?Error.captureStackTrace(s={}):s=new Error;const i=s.stack?s.stack.replace(/^.+\n/,""):"";try{r.stack?i&&!String(r.stack).endsWith(i.replace(/^.+\n.+\n/,""))&&(r.stack+=`
`+i):r.stack=i}catch{}}throw r}}_request(t,n){typeof t=="string"?(n=n||{},n.url=t):n=t||{},n=M(this.defaults,n);const{transitional:r,paramsSerializer:s,headers:i}=n;r!==void 0&&Se.assertOptions(r,{silentJSONParsing:N.transitional(N.boolean),forcedJSONParsing:N.transitional(N.boolean),clarifyTimeoutError:N.transitional(N.boolean)},!1),s!=null&&(a.isFunction(s)?n.paramsSerializer={serialize:s}:Se.assertOptions(s,{encode:N.function,serialize:N.function},!0)),n.method=(n.method||this.defaults.method||"get").toLowerCase();let o=i&&a.merge(i.common,i[n.method]);i&&a.forEach(["delete","get","head","post","put","patch","common"],h=>{delete i[h]}),n.headers=O.concat(o,i);const c=[];let l=!0;this.interceptors.request.forEach(function(y){typeof y.runWhen=="function"&&y.runWhen(n)===!1||(l=l&&y.synchronous,c.unshift(y.fulfilled,y.rejected))});const u=[];this.interceptors.response.forEach(function(y){u.push(y.fulfilled,y.rejected)});let f,d=0,w;if(!l){const h=[ft.bind(this),void 0];for(h.unshift.apply(h,c),h.push.apply(h,u),w=h.length,f=Promise.resolve(n);d<w;)f=f.then(h[d++],h[d++]);return f}w=c.length;let E=n;for(d=0;d<w;){const h=c[d++],y=c[d++];try{E=h(E)}catch(p){y.call(this,p);break}}try{f=ft.call(this,E)}catch(h){return Promise.reject(h)}for(d=0,w=u.length;d<w;)f=f.then(u[d++],u[d++]);return f}getUri(t){t=M(this.defaults,t);const n=nt(t.baseURL,t.url);return We(n,t.params,t.paramsSerializer)}}a.forEach(["delete","get","head","options"],function(t){_.prototype[t]=function(n,r){return this.request(M(r||{},{method:t,url:n,data:(r||{}).data}))}}),a.forEach(["post","put","patch"],function(t){function n(r){return function(i,o,c){return this.request(M(c||{},{method:t,headers:r?{"Content-Type":"multipart/form-data"}:{},url:i,data:o}))}}_.prototype[t]=n(),_.prototype[t+"Form"]=n(!0)});class Re{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let n;this.promise=new Promise(function(i){n=i});const r=this;this.promise.then(s=>{if(!r._listeners)return;let i=r._listeners.length;for(;i-- >0;)r._listeners[i](s);r._listeners=null}),this.promise.then=s=>{let i;const o=new Promise(c=>{r.subscribe(c),i=c}).then(s);return o.cancel=function(){r.unsubscribe(i)},o},t(function(i,o,c){r.reason||(r.reason=new k(i,o,c),n(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const n=this._listeners.indexOf(t);n!==-1&&this._listeners.splice(n,1)}toAbortSignal(){const t=new AbortController,n=r=>{t.abort(r)};return this.subscribe(n),t.signal.unsubscribe=()=>this.unsubscribe(n),t.signal}static source(){let t;return{token:new Re(function(s){t=s}),cancel:t}}}function ir(e){return function(n){return e.apply(null,n)}}function ar(e){return a.isObject(e)&&e.isAxiosError===!0}const Te={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Te).forEach(([e,t])=>{Te[t]=e});function pt(e){const t=new _(e),n=Be(_.prototype.request,t);return a.extend(n,_.prototype,t,{allOwnKeys:!0}),a.extend(n,t,null,{allOwnKeys:!0}),n.create=function(s){return pt(M(e,s))},n}const b=pt(H);b.Axios=_,b.CanceledError=k,b.CancelToken=Re,b.isCancel=Ze,b.VERSION=dt,b.toFormData=X,b.AxiosError=m,b.Cancel=b.CanceledError,b.all=function(t){return Promise.all(t)},b.spread=ir,b.isAxiosError=ar,b.mergeConfig=M,b.AxiosHeaders=O,b.formToJSON=e=>Ge(a.isHTMLForm(e)?new FormData(e):e),b.getAdapter=lt.getAdapter,b.HttpStatusCode=Te,b.default=b;class cr{constructor(t,n){this.id=t.id,this.data=t,this.messages=n}async getAllConversations(){return A.conversation.list()}getMessages(){return A.messages.getByConversation(this.id)}async drawMessages(){const t=await A.messages.getByConversation(this.id),n=document.querySelector("#messageRoot")||document.querySelector("#inner");if(console.log({messages:t,rootEl:n}),!n){console.log("no root found for messages");return}n.innerHTML="",console.log({messages:t}),t.map(r=>this.addMessageToDOM(r))}async addMessageToDOM(t){const n=document.querySelector("#messageRoot");if(!n)return;const r=document.createElement("div");t.role==="user"&&(r.innerHTML=`<user-message>${t.content}</user-message>`),t.role==="assistant"&&(r.innerHTML=`<assistant-message>${t.content}</assistant-message>`),n==null||n.appendChild(r)}async handleUserInput(t){console.log("handling");const n=t.querySelector("#user-input");if(!n)return;const r=n.value;if(r.trim()==="")return;const s=await A.messages.create(this.id,{role:"user",content:r});await this.addMessageToDOM(s);const i=await window.goChat.conversation.getMessages(),o=i.map(l=>({role:l.role,content:l.content})),c=await b.post("/send-message",{messages:o});if(c.status===200){const l=await A.messages.create(this.id,{role:"assistant",content:c.data.content});await this.addMessageToDOM(l)}n.value="",i.length===1&&A.conversation.update({...this.data,title:r})}async handleServerResponse(t){const{content:n}=JSON.parse(t),r=await A.messages.create(this.id,{role:"assistant",content:n});await this.addMessageToDOM(r)}async delete(){console.log({deleting:this.id}),await A.conversation.delete(this.id)}}async function ur(e,t){try{const n=t?await A.conversation.create(e):await A.conversation.get(e);if(window.history.replaceState(null,"",window.location.origin+`/c/${e}`),!n)return console.log("NO CONVERSATION FOUND FOR:",e);if(!n)throw Error("failed saving conversation");const r=await A.messages.getByConversation(e);console.log({1:r});const s=new cr(n,r);window.goChat.conversation=s,await s.drawMessages()}catch(n){console.log({err:n})}}class lr extends HTMLElement{constructor(){super(),this.innerHTML=`
        <div class="w-full">
            <div class="flex flex-col justify-between px-5 mb-3 max-w-5xl mx-auto rounded-lg group">
                <div class="flex justify-end pb-1">
                    <div class="rounded-lg bg-slate-700 px-2 py-2">
                        <p>${this.innerText}</p>
                    </div>
                </div>
            </div>
        </div>
        `}}class fr extends HTMLElement{connectedCallback(){var r;const t=this.getAttribute("id")||"",n=this.getAttribute("title")||"";this.innerHTML=`
            <div class="group cursor-pointer opacity-70 hover:opacity-100 transition-all flex gap-2 items-center mb-1 max-w-2xl">
                <div class="flex items-center gap-3"  hx-get="/c/${t}" hx-target="#inner">
                    <span class="material-symbols-outlined text-sm">
                        forum
                    </span>
                    <span>${n} </span>
                </div>
                
                <span id="deleteBtn" class="group-hover:opacity-100 opacity-0 material-symbols-outlined text-sm ml-auto">
                    delete
                </span>
            </div>
            `,(r=this.querySelector("#deleteBtn"))==null||r.addEventListener("click",()=>{A.conversation.delete(t),window.goChat.recentConversations.init()}),window.htmx.process(this)}}class dr extends HTMLElement{connectedCallback(){this.innerHTML=`
                <div class="flex gap-6 max-w-5xl">
                    <div>	
                        <div hx-get="/component/avatar" hx-trigger="load"></div>
                    </div>
                    <div>
                        <p class="font-bold mb-1">modelname</p>
                        <p class="max-w-2xl">${this.innerText}</p>
                    </div>
                </div>
      `,window.htmx.process(this)}}customElements.define("user-message",lr),customElements.define("assistant-message",dr),customElements.define("recent-conversation",fr),htmx.defineExtension("openai",{onEvent:async function(e,t){if(e==="htmx:beforeSend"){t.preventDefault();const n=await window.goChat.conversation.getMessages();htmx.ajax("POST","send-message",{messages:n})}}}),console.log("hello from conversations");const mt={init:async function(){const e=document.querySelector("#recentConversationsRoot");if(!e)return;e.innerHTML="",(await A.conversation.list()).map((n,r)=>{if(r>6)return;const s=document.createElement("div");s.innerHTML=`<recent-conversation id="${n.id}" title="${n.title}"></recent-conversation>`,e==null||e.appendChild(s)})}};window.goChat={initConversation:ur,recentConversations:mt},(async()=>mt.init())()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL25hbm9pZC91cmwtYWxwaGFiZXQvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmJyb3dzZXIuanMiLCIuLi9zcmMvZGIudHMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9udWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9Gb3JtRGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Jsb2IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2NvbW1vbi91dGlscy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zSGVhZGVycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Rocm90dGxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9yZXNvbHZlQ29uZmlnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tcG9zZVNpZ25hbHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdHJhY2tTdHJlYW0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2ZldGNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2Vudi9kYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwiLi4vc3JjL2NvbnZlcnNhdGlvbi50cyIsIi4uL3NyYy9jb21wb25lbnRzLnRzIiwiLi4vc3JjL2h0bXgtb3BlbmFpLnRzIiwiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb21pc2UsIHJlcXVlc3QpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHR4KSB7XG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QodHguZXJyb3IgfHwgbmV3IERPTUV4Y2VwdGlvbignQWJvcnRFcnJvcicsICdBYm9ydEVycm9yJykpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xufVxubGV0IGlkYlByb3h5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Eb25lTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gTWFrZSB0eC5zdG9yZSByZXR1cm4gdGhlIG9ubHkgc3RvcmUgaW4gdGhlIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgYXJlIG1hbnkuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogcmVjZWl2ZXIub2JqZWN0U3RvcmUocmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB0cmFuc2Zvcm0gd2hhdGV2ZXIgd2UgZ2V0IGJhY2suXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxuICAgICAgICAgICAgKHByb3AgPT09ICdkb25lJyB8fCBwcm9wID09PSAnc3RvcmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0O1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVwbGFjZVRyYXBzKGNhbGxiYWNrKSB7XG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xufVxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxuICAgIC8vIG9ubHkgY3JlYXRlIG9uZSBuZXcgZnVuYyBwZXIgZnVuYy5cbiAgICAvLyBDdXJzb3IgbWV0aG9kcyBhcmUgc3BlY2lhbCwgYXMgdGhlIGJlaGF2aW91ciBpcyBhIGxpdHRsZSBtb3JlIGRpZmZlcmVudCB0byBzdGFuZGFyZCBJREIuIEluXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcbiAgICAvLyBjdXJzb3IuIEl0J3Mga2luZGEgbGlrZSBhIHByb21pc2UgdGhhdCBjYW4gcmVzb2x2ZSB3aXRoIG1hbnkgdmFsdWVzLiBUaGF0IGRvZXNuJ3QgbWFrZSBzZW5zZVxuICAgIC8vIHdpdGggcmVhbCBwcm9taXNlcywgc28gZWFjaCBhZHZhbmNlIG1ldGhvZHMgcmV0dXJucyBhIG5ldyBwcm9taXNlIGZvciB0aGUgY3Vyc29yIG9iamVjdCwgb3JcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgaWYgKGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkuaW5jbHVkZXMoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAodGhpcy5yZXF1ZXN0KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbiksIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZykge1xuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsIChldmVudCkgPT4gYmxvY2tpbmcoZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmNvbnN0IGFkdmFuY2VNZXRob2RQcm9wcyA9IFsnY29udGludWUnLCAnY29udGludWVQcmltYXJ5S2V5JywgJ2FkdmFuY2UnXTtcbmNvbnN0IG1ldGhvZE1hcCA9IHt9O1xuY29uc3QgYWR2YW5jZVJlc3VsdHMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgaXR0clByb3hpZWRDdXJzb3JUb09yaWdpbmFsUHJveHkgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgY3Vyc29ySXRlcmF0b3JUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICghYWR2YW5jZU1ldGhvZFByb3BzLmluY2x1ZGVzKHByb3ApKVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICAgICAgbGV0IGNhY2hlZEZ1bmMgPSBtZXRob2RNYXBbcHJvcF07XG4gICAgICAgIGlmICghY2FjaGVkRnVuYykge1xuICAgICAgICAgICAgY2FjaGVkRnVuYyA9IG1ldGhvZE1hcFtwcm9wXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgYWR2YW5jZVJlc3VsdHMuc2V0KHRoaXMsIGl0dHJQcm94aWVkQ3Vyc29yVG9PcmlnaW5hbFByb3h5LmdldCh0aGlzKVtwcm9wXSguLi5hcmdzKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZWRGdW5jO1xuICAgIH0sXG59O1xuYXN5bmMgZnVuY3Rpb24qIGl0ZXJhdGUoLi4uYXJncykge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby10aGlzLWFzc2lnbm1lbnRcbiAgICBsZXQgY3Vyc29yID0gdGhpcztcbiAgICBpZiAoIShjdXJzb3IgaW5zdGFuY2VvZiBJREJDdXJzb3IpKSB7XG4gICAgICAgIGN1cnNvciA9IGF3YWl0IGN1cnNvci5vcGVuQ3Vyc29yKC4uLmFyZ3MpO1xuICAgIH1cbiAgICBpZiAoIWN1cnNvcilcbiAgICAgICAgcmV0dXJuO1xuICAgIGN1cnNvciA9IGN1cnNvcjtcbiAgICBjb25zdCBwcm94aWVkQ3Vyc29yID0gbmV3IFByb3h5KGN1cnNvciwgY3Vyc29ySXRlcmF0b3JUcmFwcyk7XG4gICAgaXR0clByb3hpZWRDdXJzb3JUb09yaWdpbmFsUHJveHkuc2V0KHByb3hpZWRDdXJzb3IsIGN1cnNvcik7XG4gICAgLy8gTWFwIHRoaXMgZG91YmxlLXByb3h5IGJhY2sgdG8gdGhlIG9yaWdpbmFsLCBzbyBvdGhlciBjdXJzb3IgbWV0aG9kcyB3b3JrLlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJveGllZEN1cnNvciwgdW53cmFwKGN1cnNvcikpO1xuICAgIHdoaWxlIChjdXJzb3IpIHtcbiAgICAgICAgeWllbGQgcHJveGllZEN1cnNvcjtcbiAgICAgICAgLy8gSWYgb25lIG9mIHRoZSBhZHZhbmNpbmcgbWV0aG9kcyB3YXMgbm90IGNhbGxlZCwgY2FsbCBjb250aW51ZSgpLlxuICAgICAgICBjdXJzb3IgPSBhd2FpdCAoYWR2YW5jZVJlc3VsdHMuZ2V0KHByb3hpZWRDdXJzb3IpIHx8IGN1cnNvci5jb250aW51ZSgpKTtcbiAgICAgICAgYWR2YW5jZVJlc3VsdHMuZGVsZXRlKHByb3hpZWRDdXJzb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzSXRlcmF0b3JQcm9wKHRhcmdldCwgcHJvcCkge1xuICAgIHJldHVybiAoKHByb3AgPT09IFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmXG4gICAgICAgIGluc3RhbmNlT2ZBbnkodGFyZ2V0LCBbSURCSW5kZXgsIElEQk9iamVjdFN0b3JlLCBJREJDdXJzb3JdKSkgfHxcbiAgICAgICAgKHByb3AgPT09ICdpdGVyYXRlJyAmJiBpbnN0YW5jZU9mQW55KHRhcmdldCwgW0lEQkluZGV4LCBJREJPYmplY3RTdG9yZV0pKSk7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmIChpc0l0ZXJhdG9yUHJvcCh0YXJnZXQsIHByb3ApKVxuICAgICAgICAgICAgcmV0dXJuIGl0ZXJhdGU7XG4gICAgICAgIHJldHVybiBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcik7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIHJldHVybiBpc0l0ZXJhdG9yUHJvcCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApO1xuICAgIH0sXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIsIHVud3JhcCwgd3JhcCB9O1xuIiwiZXhwb3J0IGNvbnN0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG4iLCJpbXBvcnQgeyB1cmxBbHBoYWJldCBhcyBzY29wZWRVcmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuZXhwb3J0IHsgdXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcbmV4cG9ydCBsZXQgcmFuZG9tID0gYnl0ZXMgPT4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShieXRlcykpXG5leHBvcnQgbGV0IGN1c3RvbVJhbmRvbSA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUsIGdldFJhbmRvbSkgPT4ge1xuICBsZXQgbWFzayA9ICgyIDw8IChNYXRoLmxvZyhhbHBoYWJldC5sZW5ndGggLSAxKSAvIE1hdGguTE4yKSkgLSAxXG4gIGxldCBzdGVwID0gLX4oKDEuNiAqIG1hc2sgKiBkZWZhdWx0U2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG4gIHJldHVybiAoc2l6ZSA9IGRlZmF1bHRTaXplKSA9PiB7XG4gICAgbGV0IGlkID0gJydcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbGV0IGJ5dGVzID0gZ2V0UmFuZG9tKHN0ZXApXG4gICAgICBsZXQgaiA9IHN0ZXBcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgaWQgKz0gYWxwaGFiZXRbYnl0ZXNbal0gJiBtYXNrXSB8fCAnJ1xuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSBzaXplKSByZXR1cm4gaWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBsZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIHNpemUgPSAyMSkgPT5cbiAgY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG5leHBvcnQgbGV0IG5hbm9pZCA9IChzaXplID0gMjEpID0+IHtcbiAgbGV0IGlkID0gJydcbiAgbGV0IGJ5dGVzID0gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSlcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIGlkICs9IHNjb3BlZFVybEFscGhhYmV0W2J5dGVzW3NpemVdICYgNjNdXG4gIH1cbiAgcmV0dXJuIGlkXG59XG4iLCJpbXBvcnQge0RCU2NoZW1hLCBvcGVuREJ9IGZyb20gXCJpZGJcIjtcbmltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZCdcblxuaW1wb3J0IHtDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSwgQ2hhdENvbXBsZXRpb25Vc2VyTWVzc2FnZVBhcmFtfSBmcm9tIFwib3BlbmFpL3NyYy9yZXNvdXJjZXMvY2hhdC9jb21wbGV0aW9uc1wiO1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlID0gQ2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW0gJiB7XG4gIGlkOiBzdHJpbmc7XG4gIGNvbnZlcnNhdGlvbklkOiBzdHJpbmc7XG4gIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBTYXZlZENvbnZlcnNhdGlvbiAgPSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGlkOiBzdHJpbmc7XG4gIGRhdGU6IERhdGU7XG59O1xuXG5pbnRlcmZhY2UgTXlEQiBleHRlbmRzIERCU2NoZW1hIHtcbiAgY29udmVyc2F0aW9uczoge1xuICAgIGtleTogc3RyaW5nO1xuICAgIHZhbHVlOiBTYXZlZENvbnZlcnNhdGlvblxuICB9O1xuICBtZXNzYWdlczoge1xuICAgIGtleTogc3RyaW5nO1xuICAgIHZhbHVlOiBNZXNzYWdlXG4gICAgaW5kZXhlczogeyAnY29udmVyc2F0aW9uSWQnOiBzdHJpbmcgfTtcbiAgfTtcbn1cblxuXG4vLyBDaGF0Q29tcGxldGlvblVzZXJNZXNzYWdlUGFyYW1cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gIHJldHVybiBvcGVuREI8TXlEQj4oXCJnb0NoYXRcIiwgMSwge1xuICAgIHVwZ3JhZGUoZGIpIHtcbiAgICAgIC8vIENyZWF0ZSBhIHN0b3JlIG9mIG9iamVjdHNcbiAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFwiY29udmVyc2F0aW9uc1wiLCB7XG4gICAgICAgIGtleVBhdGg6IFwiaWRcIixcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgbWVzc2FnZVN0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoXCJtZXNzYWdlc1wiLCB7XG4gICAgICAgIGtleVBhdGg6IFwiaWRcIixcbiAgICAgICAgYXV0b0luY3JlbWVudDogdHJ1ZSxcbiAgICAgIH0pO1xuXG4gICAgICBtZXNzYWdlU3RvcmUuY3JlYXRlSW5kZXgoJ2NvbnZlcnNhdGlvbklkJywgJ2NvbnZlcnNhdGlvbklkJyk7XG5cbiAgICB9LFxuICB9KTtcbn1cblxuLy8gQ3JlYXRlIGNvbnZlcnNhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUNvbnZlcnNhdGlvbihpZDogc3RyaW5nKSB7XG4gIGNvbnN0IGRiID0gYXdhaXQgaW5pdCgpO1xuICBjb25zdCB2YWx1ZSA9IHtcbiAgICBpZCxcbiAgICBkYXRlOiBuZXcgRGF0ZSgnMjAxOS0wMS0wMScpLFxuICAgIHRpdGxlOiBcIk5ldyBjb252ZXJzYXRpb25cIlxuICB9XG5cbiAgYXdhaXQgZGIuYWRkKCdjb252ZXJzYXRpb25zJywgdmFsdWUpO1xuXG4gIC8vIFRlbXAgbW9jayBkYXRhXG4gIC8vIGNyZWF0ZU1lc3NhZ2UoaWQsIHtjb250ZW50OiBcIlRoaXMgaXMgYSBxdWVzdGlvblwiLCByb2xlOiAndXNlcid9KVxuICAvLyBjcmVhdGVNZXNzYWdlKGlkLCB7Y29udGVudDogXCJUaGlzIGlzIGFuIGFuc3dlclwiLCByb2xlOiAnYXNzaXN0YW50J30pXG5cbiAgcmV0dXJuIHZhbHVlXG59XG4vLyBHZXQgY29udmVyc2F0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q29udmVyc2F0aW9uKGlkOiBzdHJpbmcpIHtcbiAgY29uc3QgZGIgPSBhd2FpdCBpbml0KCk7XG4gIHJldHVybiBkYi5nZXQoJ2NvbnZlcnNhdGlvbnMnLCBpZClcbn1cblxuLy8gVXBkYXRlIGNvbnZlcnNhdGlvblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZUNvbnZlcnNhdGlvbihjOiBTYXZlZENvbnZlcnNhdGlvbikge1xuICBjb25zdCBkYiA9IGF3YWl0IGluaXQoKTtcbiAgcmV0dXJuIGRiLnB1dCgnY29udmVyc2F0aW9ucycsIGMpXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWxldGVDb252ZXJzYXRpb24oaWQ6IHN0cmluZykge1xuICBjb25zdCBkYiA9IGF3YWl0IGluaXQoKTtcbiAgcmV0dXJuIGRiLmRlbGV0ZSgnY29udmVyc2F0aW9ucycsIGlkKVxufVxuXG4vLyBHZXQgY29udmVyc2F0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbGlzdENvbnZlcnNhdGlvbnMoKSB7XG4gIGNvbnN0IGRiID0gYXdhaXQgaW5pdCgpO1xuICBjb25zdCBhbGwgPSBhd2FpdCBkYi5nZXRBbGwoJ2NvbnZlcnNhdGlvbnMnKTtcblxuICByZXR1cm4gYWxsLnNvcnQoKGEsIGIpID0+IGIuZGF0ZS5nZXRUaW1lKCkgLSBhLmRhdGUuZ2V0VGltZSgpKTtcbn1cblxuLy8gQWRkIG1lc3NhZ2UgdG8gY29udmVyc2F0aW9uXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlTWVzc2FnZShjb252ZXJzYXRpb25JZDogc3RyaW5nLCBtZXNzYWdlOiBDaGF0Q29tcGxldGlvbk1lc3NhZ2VQYXJhbSkge1xuICBjb25zdCBkYiA9IGF3YWl0IGluaXQoKTtcbiAgY29uc3QgdmFsdWUgPSB7XG4gICAgaWQ6IG5hbm9pZCgpLFxuICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICBjb252ZXJzYXRpb25JZCxcbiAgICAuLi5tZXNzYWdlXG4gIH1cblxuICBhd2FpdCBkYi5hZGQoJ21lc3NhZ2VzJywgdmFsdWUpO1xuXG4gIHJldHVybiB2YWx1ZVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWVzc2FnZXNGb3JDb252ZXJzYXRpb24oY29udmVyc2F0aW9uSWQ6IHN0cmluZykge1xuICBjb25zdCBkYiA9IGF3YWl0IGluaXQoKTtcblxuICB0cnkge1xuICAgIC8vIFVzZSB0aGUgaW5kZXggd2UgY3JlYXRlZCBvbiBjb252ZXJzYXRpb25JZFxuICAgIGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgZGIuZ2V0QWxsRnJvbUluZGV4KCdtZXNzYWdlcycsICdjb252ZXJzYXRpb25JZCcsIGNvbnZlcnNhdGlvbklkKTtcblxuICAgIC8vIFNvcnQgbWVzc2FnZXMgYnkgdGltZXN0YW1wIGlmIG5lZWRlZFxuICAgIG1lc3NhZ2VzLnNvcnQoKGEsIGIpID0+IGEudGltZXN0YW1wIC0gYi50aW1lc3RhbXApO1xuXG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIG1lc3NhZ2VzOicsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH0gZmluYWxseSB7XG4gICAgZGIuY2xvc2UoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG1lc3NhZ2VzOiB7XG4gICAgY3JlYXRlOiBjcmVhdGVNZXNzYWdlLFxuICAgIGdldEJ5Q29udmVyc2F0aW9uOiBnZXRNZXNzYWdlc0ZvckNvbnZlcnNhdGlvblxuICB9LFxuICBjb252ZXJzYXRpb246IHtcbiAgICBnZXQ6IGdldENvbnZlcnNhdGlvbixcbiAgICBjcmVhdGU6IGNyZWF0ZUNvbnZlcnNhdGlvbixcbiAgICBsaXN0OiBsaXN0Q29udmVyc2F0aW9ucyxcbiAgICB1cGRhdGU6IHVwZGF0ZUNvbnZlcnNhdGlvbixcbiAgICBkZWxldGU6IGRlbGV0ZUNvbnZlcnNhdGlvblxuICB9XG59XG5cblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG5jb25zdCBbaXNSZWFkYWJsZVN0cmVhbSwgaXNSZXF1ZXN0LCBpc1Jlc3BvbnNlLCBpc0hlYWRlcnNdID0gWydSZWFkYWJsZVN0cmVhbScsICdSZXF1ZXN0JywgJ1Jlc3BvbnNlJywgJ0hlYWRlcnMnXS5tYXAoa2luZE9mVGVzdCk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBsZXQgcmV0O1xuICAgIGlmICgocmV0ID0gcmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopKSAhPT0gZmFsc2UpIHtcbiAgICAgIHJlZHVjZWREZXNjcmlwdG9yc1tuYW1lXSA9IHJldCB8fCBkZXNjcmlwdG9yO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMob2JqLCByZWR1Y2VkRGVzY3JpcHRvcnMpO1xufVxuXG4vKipcbiAqIE1ha2VzIGFsbCBtZXRob2RzIHJlYWQtb25seVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICovXG5cbmNvbnN0IGZyZWV6ZU1ldGhvZHMgPSAob2JqKSA9PiB7XG4gIHJlZHVjZURlc2NyaXB0b3JzKG9iaiwgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICAvLyBza2lwIHJlc3RyaWN0ZWQgcHJvcHMgaW4gc3RyaWN0IG1vZGVcbiAgICBpZiAoaXNGdW5jdGlvbihvYmopICYmIFsnYXJndW1lbnRzJywgJ2NhbGxlcicsICdjYWxsZWUnXS5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gb2JqW25hbWVdO1xuXG4gICAgaWYgKCFpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmFsc2U7XG5cbiAgICBpZiAoJ3dyaXRhYmxlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFkZXNjcmlwdG9yLnNldCkge1xuICAgICAgZGVzY3JpcHRvci5zZXQgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IEVycm9yKCdDYW4gbm90IHJld3JpdGUgcmVhZC1vbmx5IG1ldGhvZCBcXCcnICsgbmFtZSArICdcXCcnKTtcbiAgICAgIH07XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzQXJyYXkoYXJyYXlPclN0cmluZykgPyBkZWZpbmUoYXJyYXlPclN0cmluZykgOiBkZWZpbmUoU3RyaW5nKGFycmF5T3JTdHJpbmcpLnNwbGl0KGRlbGltaXRlcikpO1xuXG4gIHJldHVybiBvYmo7XG59XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSA9ICt2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbi8vIG9yaWdpbmFsIGNvZGVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EaWdpdGFsQnJhaW5KUy9BeGlvc1Byb21pc2UvYmxvYi8xNmRlYWIxMzcxMGVjMDk3Nzk5MjIxMzFmM2ZhNTk1NDMyMGY4M2FiL2xpYi91dGlscy5qcyNMMTEtTDM0XG5cbmNvbnN0IF9zZXRJbW1lZGlhdGUgPSAoKHNldEltbWVkaWF0ZVN1cHBvcnRlZCwgcG9zdE1lc3NhZ2VTdXBwb3J0ZWQpID0+IHtcbiAgaWYgKHNldEltbWVkaWF0ZVN1cHBvcnRlZCkge1xuICAgIHJldHVybiBzZXRJbW1lZGlhdGU7XG4gIH1cblxuICByZXR1cm4gcG9zdE1lc3NhZ2VTdXBwb3J0ZWQgPyAoKHRva2VuLCBjYWxsYmFja3MpID0+IHtcbiAgICBfZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsICh7c291cmNlLCBkYXRhfSkgPT4ge1xuICAgICAgaWYgKHNvdXJjZSA9PT0gX2dsb2JhbCAmJiBkYXRhID09PSB0b2tlbikge1xuICAgICAgICBjYWxsYmFja3MubGVuZ3RoICYmIGNhbGxiYWNrcy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgfSwgZmFsc2UpO1xuXG4gICAgcmV0dXJuIChjYikgPT4ge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgICAgX2dsb2JhbC5wb3N0TWVzc2FnZSh0b2tlbiwgXCIqXCIpO1xuICAgIH1cbiAgfSkoYGF4aW9zQCR7TWF0aC5yYW5kb20oKX1gLCBbXSkgOiAoY2IpID0+IHNldFRpbWVvdXQoY2IpO1xufSkoXG4gIHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicsXG4gIGlzRnVuY3Rpb24oX2dsb2JhbC5wb3N0TWVzc2FnZSlcbik7XG5cbmNvbnN0IGFzYXAgPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgIT09ICd1bmRlZmluZWQnID9cbiAgcXVldWVNaWNyb3Rhc2suYmluZChfZ2xvYmFsKSA6ICggdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MubmV4dFRpY2sgfHwgX3NldEltbWVkaWF0ZSk7XG5cbi8vICoqKioqKioqKioqKioqKioqKioqKlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1JlYWRhYmxlU3RyZWFtLFxuICBpc1JlcXVlc3QsXG4gIGlzUmVzcG9uc2UsXG4gIGlzSGVhZGVycyxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZSxcbiAgc2V0SW1tZWRpYXRlOiBfc2V0SW1tZWRpYXRlLFxuICBhc2FwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbmZpZ10gVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG5cbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XG4gIH1cblxuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIGlmIChyZXNwb25zZSkge1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICB0aGlzLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cyA/IHJlc3BvbnNlLnN0YXR1cyA6IG51bGw7XG4gIH1cbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5zdGF0dXNcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJpbXBvcnQgVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4vY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMnXG5pbXBvcnQgRm9ybURhdGEgZnJvbSAnLi9jbGFzc2VzL0Zvcm1EYXRhLmpzJ1xuaW1wb3J0IEJsb2IgZnJvbSAnLi9jbGFzc2VzL0Jsb2IuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNCcm93c2VyOiB0cnVlLFxuICBjbGFzc2VzOiB7XG4gICAgVVJMU2VhcmNoUGFyYW1zLFxuICAgIEZvcm1EYXRhLFxuICAgIEJsb2JcbiAgfSxcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5jb25zdCBfbmF2aWdhdG9yID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yIHx8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlckVudiA9IGhhc0Jyb3dzZXJFbnYgJiZcbiAgKCFfbmF2aWdhdG9yIHx8IFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihfbmF2aWdhdG9yLnByb2R1Y3QpIDwgMCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbmNvbnN0IG9yaWdpbiA9IGhhc0Jyb3dzZXJFbnYgJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJ2h0dHA6Ly9sb2NhbGhvc3QnO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudixcbiAgX25hdmlnYXRvciBhcyBuYXZpZ2F0b3IsXG4gIG9yaWdpblxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJywgJ2ZldGNoJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1JlYWRhYmxlU3RyZWFtKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHV0aWxzLmlzUmVzcG9uc2UoZGF0YSkgfHwgdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCddLCAobWV0aG9kKSA9PiB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuY29uc3QgaXNWYWxpZEhlYWRlck5hbWUgPSAoc3RyKSA9PiAvXlstX2EtekEtWjAtOV5gfH4sISMkJSYnKisuXSskLy50ZXN0KHN0ci50cmltKCkpO1xuXG5mdW5jdGlvbiBtYXRjaEhlYWRlclZhbHVlKGNvbnRleHQsIHZhbHVlLCBoZWFkZXIsIGZpbHRlciwgaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsdGVyKSAhPT0gLTE7XG4gIH1cblxuICBpZiAodXRpbHMuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBsSGVhZGVyKTtcblxuICAgICAgaWYoIWtleSB8fCBzZWxmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBfcmV3cml0ZSA9PT0gdHJ1ZSB8fCAoX3Jld3JpdGUgPT09IHVuZGVmaW5lZCAmJiBzZWxmW2tleV0gIT09IGZhbHNlKSkge1xuICAgICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IChoZWFkZXJzLCBfcmV3cml0ZSkgPT5cbiAgICAgIHV0aWxzLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKVxuICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNIZWFkZXJzKGhlYWRlcikpIHtcbiAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGhlYWRlci5lbnRyaWVzKCkpIHtcbiAgICAgICAgc2V0SGVhZGVyKHZhbHVlLCBrZXksIHJld3JpdGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxuLy8gcmVzZXJ2ZWQgbmFtZXMgaG90Zml4XG51dGlscy5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL0F4aW9zRXJyb3IuanMnO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzcGVlZG9tZXRlcjtcbiIsIi8qKlxuICogVGhyb3R0bGUgZGVjb3JhdG9yXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IGZyZXFcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmbiwgZnJlcSkge1xuICBsZXQgdGltZXN0YW1wID0gMDtcbiAgbGV0IHRocmVzaG9sZCA9IDEwMDAgLyBmcmVxO1xuICBsZXQgbGFzdEFyZ3M7XG4gIGxldCB0aW1lcjtcblxuICBjb25zdCBpbnZva2UgPSAoYXJncywgbm93ID0gRGF0ZS5ub3coKSkgPT4ge1xuICAgIHRpbWVzdGFtcCA9IG5vdztcbiAgICBsYXN0QXJncyA9IG51bGw7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgIH1cbiAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgfVxuXG4gIGNvbnN0IHRocm90dGxlZCA9ICguLi5hcmdzKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBwYXNzZWQgPSBub3cgLSB0aW1lc3RhbXA7XG4gICAgaWYgKCBwYXNzZWQgPj0gdGhyZXNob2xkKSB7XG4gICAgICBpbnZva2UoYXJncywgbm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgICAgaWYgKCF0aW1lcikge1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgICBpbnZva2UobGFzdEFyZ3MpXG4gICAgICAgIH0sIHRocmVzaG9sZCAtIHBhc3NlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgZmx1c2ggPSAoKSA9PiBsYXN0QXJncyAmJiBpbnZva2UobGFzdEFyZ3MpO1xuXG4gIHJldHVybiBbdGhyb3R0bGVkLCBmbHVzaF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRocm90dGxlO1xuIiwiaW1wb3J0IHNwZWVkb21ldGVyIGZyb20gXCIuL3NwZWVkb21ldGVyLmpzXCI7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSBcIi4vdGhyb3R0bGUuanNcIjtcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGNvbnN0IHByb2dyZXNzRXZlbnRSZWR1Y2VyID0gKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtLCBmcmVxID0gMykgPT4ge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiB0aHJvdHRsZShlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgbGVuZ3RoQ29tcHV0YWJsZTogdG90YWwgIT0gbnVsbCxcbiAgICAgIFtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXTogdHJ1ZVxuICAgIH07XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfSwgZnJlcSk7XG59XG5cbmV4cG9ydCBjb25zdCBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yID0gKHRvdGFsLCB0aHJvdHRsZWQpID0+IHtcbiAgY29uc3QgbGVuZ3RoQ29tcHV0YWJsZSA9IHRvdGFsICE9IG51bGw7XG5cbiAgcmV0dXJuIFsobG9hZGVkKSA9PiB0aHJvdHRsZWRbMF0oe1xuICAgIGxlbmd0aENvbXB1dGFibGUsXG4gICAgdG90YWwsXG4gICAgbG9hZGVkXG4gIH0pLCB0aHJvdHRsZWRbMV1dO1xufVxuXG5leHBvcnQgY29uc3QgYXN5bmNEZWNvcmF0b3IgPSAoZm4pID0+ICguLi5hcmdzKSA9PiB1dGlscy5hc2FwKCgpID0+IGZuKC4uLmFyZ3MpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4vLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICBjb25zdCBtc2llID0gcGxhdGZvcm0ubmF2aWdhdG9yICYmIC8obXNpZXx0cmlkZW50KS9pLnRlc3QocGxhdGZvcm0ubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpO1xuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAge1xuICAgIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgY29uc3QgY29va2llID0gW25hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpXTtcblxuICAgICAgdXRpbHMuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhwYXRoKSAmJiBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG5cbiAgICAgIHV0aWxzLmlzU3RyaW5nKGRvbWFpbikgJiYgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcblxuICAgICAgc2VjdXJlID09PSB0cnVlICYmIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcblxuICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgfSxcblxuICAgIHJlYWQobmFtZSkge1xuICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICB9LFxuXG4gICAgcmVtb3ZlKG5hbWUpIHtcbiAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgfVxuICB9XG5cbiAgOlxuXG4gIC8vIE5vbi1zdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAge1xuICAgIHdyaXRlKCkge30sXG4gICAgcmVhZCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgcmVtb3ZlKCkge31cbiAgfTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8/XFwvJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgaXNBYnNvbHV0ZVVSTCBmcm9tICcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMnO1xuaW1wb3J0IGNvbWJpbmVVUkxzIGZyb20gJy4uL2hlbHBlcnMvY29tYmluZVVSTHMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8geyAuLi50aGluZyB9IDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgd2l0aFhTUkZUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBhZGFwdGVyOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlVHlwZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmQ29va2llTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB4c3JmSGVhZGVyTmFtZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvblVwbG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uRG93bmxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBkZWNvbXByZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heENvbnRlbnRMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Qm9keUxlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBiZWZvcmVSZWRpcmVjdDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc3BvcnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cEFnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBzQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgY2FuY2VsVG9rZW46IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgc29ja2V0UGF0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZUVuY29kaW5nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHZhbGlkYXRlU3RhdHVzOiBtZXJnZURpcmVjdEtleXMsXG4gICAgaGVhZGVyczogKGEsIGIpID0+IG1lcmdlRGVlcFByb3BlcnRpZXMoaGVhZGVyc1RvT2JqZWN0KGEpLCBoZWFkZXJzVG9PYmplY3QoYiksIHRydWUpXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBjb25maWcxLCBjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgY29uc3QgbWVyZ2UgPSBtZXJnZU1hcFtwcm9wXSB8fCBtZXJnZURlZXBQcm9wZXJ0aWVzO1xuICAgIGNvbnN0IGNvbmZpZ1ZhbHVlID0gbWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSwgcHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tIFwiLi9pc1VSTFNhbWVPcmlnaW4uanNcIjtcbmltcG9ydCBjb29raWVzIGZyb20gXCIuL2Nvb2tpZXMuanNcIjtcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gXCIuLi9jb3JlL2J1aWxkRnVsbFBhdGguanNcIjtcbmltcG9ydCBtZXJnZUNvbmZpZyBmcm9tIFwiLi4vY29yZS9tZXJnZUNvbmZpZy5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBidWlsZFVSTCBmcm9tIFwiLi9idWlsZFVSTC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCAoY29uZmlnKSA9PiB7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IG1lcmdlQ29uZmlnKHt9LCBjb25maWcpO1xuXG4gIGxldCB7ZGF0YSwgd2l0aFhTUkZUb2tlbiwgeHNyZkhlYWRlck5hbWUsIHhzcmZDb29raWVOYW1lLCBoZWFkZXJzLCBhdXRofSA9IG5ld0NvbmZpZztcblxuICBuZXdDb25maWcuaGVhZGVycyA9IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShoZWFkZXJzKTtcblxuICBuZXdDb25maWcudXJsID0gYnVpbGRVUkwoYnVpbGRGdWxsUGF0aChuZXdDb25maWcuYmFzZVVSTCwgbmV3Q29uZmlnLnVybCksIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcblxuICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gIGlmIChhdXRoKSB7XG4gICAgaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArXG4gICAgICBidG9hKChhdXRoLnVzZXJuYW1lIHx8ICcnKSArICc6JyArIChhdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgucGFzc3dvcmQpKSA6ICcnKSlcbiAgICApO1xuICB9XG5cbiAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpKSB7XG4gICAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUodW5kZWZpbmVkKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH0gZWxzZSBpZiAoKGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpKSAhPT0gZmFsc2UpIHtcbiAgICAgIC8vIGZpeCBzZW1pY29sb24gZHVwbGljYXRpb24gaXNzdWUgZm9yIFJlYWN0TmF0aXZlIEZvcm1EYXRhIGltcGxlbWVudGF0aW9uXG4gICAgICBjb25zdCBbdHlwZSwgLi4udG9rZW5zXSA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuc3BsaXQoJzsnKS5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoW3R5cGUgfHwgJ211bHRpcGFydC9mb3JtLWRhdGEnLCAuLi50b2tlbnNdLmpvaW4oJzsgJykpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEFkZCB4c3JmIGhlYWRlclxuICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cblxuICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgd2l0aFhTUkZUb2tlbiAmJiB1dGlscy5pc0Z1bmN0aW9uKHdpdGhYU1JGVG9rZW4pICYmICh3aXRoWFNSRlRva2VuID0gd2l0aFhTUkZUb2tlbihuZXdDb25maWcpKTtcblxuICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4obmV3Q29uZmlnLnVybCkpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IHhzcmZIZWFkZXJOYW1lICYmIHhzcmZDb29raWVOYW1lICYmIGNvb2tpZXMucmVhZCh4c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgaGVhZGVycy5zZXQoeHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0NvbmZpZztcbn1cblxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHNldHRsZSBmcm9tICcuLy4uL2NvcmUvc2V0dGxlLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQge3Byb2dyZXNzRXZlbnRSZWR1Y2VyfSBmcm9tICcuLi9oZWxwZXJzL3Byb2dyZXNzRXZlbnRSZWR1Y2VyLmpzJztcbmltcG9ydCByZXNvbHZlQ29uZmlnIGZyb20gXCIuLi9oZWxwZXJzL3Jlc29sdmVDb25maWcuanNcIjtcblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjb25zdCBfY29uZmlnID0gcmVzb2x2ZUNvbmZpZyhjb25maWcpO1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IF9jb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKF9jb25maWcuaGVhZGVycykubm9ybWFsaXplKCk7XG4gICAgbGV0IHtyZXNwb25zZVR5cGUsIG9uVXBsb2FkUHJvZ3Jlc3MsIG9uRG93bmxvYWRQcm9ncmVzc30gPSBfY29uZmlnO1xuICAgIGxldCBvbkNhbmNlbGVkO1xuICAgIGxldCB1cGxvYWRUaHJvdHRsZWQsIGRvd25sb2FkVGhyb3R0bGVkO1xuICAgIGxldCBmbHVzaFVwbG9hZCwgZmx1c2hEb3dubG9hZDtcblxuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBmbHVzaFVwbG9hZCAmJiBmbHVzaFVwbG9hZCgpOyAvLyBmbHVzaCBldmVudHNcbiAgICAgIGZsdXNoRG93bmxvYWQgJiYgZmx1c2hEb3dubG9hZCgpOyAvLyBmbHVzaCBldmVudHNcblxuICAgICAgX2NvbmZpZy5jYW5jZWxUb2tlbiAmJiBfY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuXG4gICAgICBfY29uZmlnLnNpZ25hbCAmJiBfY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oX2NvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgX2NvbmZpZy51cmwsIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBfY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gX2NvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIF9jb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBfY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChfY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IF9jb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKF9jb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIV9jb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IF9jb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAob25Eb3dubG9hZFByb2dyZXNzKSB7XG4gICAgICAoW2Rvd25sb2FkVGhyb3R0bGVkLCBmbHVzaERvd25sb2FkXSA9IHByb2dyZXNzRXZlbnRSZWR1Y2VyKG9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGRvd25sb2FkVGhyb3R0bGVkKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmIChvblVwbG9hZFByb2dyZXNzICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICAoW3VwbG9hZFRocm90dGxlZCwgZmx1c2hVcGxvYWRdID0gcHJvZ3Jlc3NFdmVudFJlZHVjZXIob25VcGxvYWRQcm9ncmVzcykpO1xuXG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHVwbG9hZFRocm90dGxlZCk7XG5cbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlbmQnLCBmbHVzaFVwbG9hZCk7XG4gICAgfVxuXG4gICAgaWYgKF9jb25maWcuY2FuY2VsVG9rZW4gfHwgX2NvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gY2FuY2VsID0+IHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IGNhbmNlbC50eXBlID8gbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnLCByZXF1ZXN0KSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfY29uZmlnLmNhbmNlbFRva2VuICYmIF9jb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKF9jb25maWcuc2lnbmFsKSB7XG4gICAgICAgIF9jb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBfY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChfY29uZmlnLnVybCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSBcIi4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzXCI7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tIFwiLi4vY29yZS9BeGlvc0Vycm9yLmpzXCI7XG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCBjb21wb3NlU2lnbmFscyA9IChzaWduYWxzLCB0aW1lb3V0KSA9PiB7XG4gIGNvbnN0IHtsZW5ndGh9ID0gKHNpZ25hbHMgPSBzaWduYWxzID8gc2lnbmFscy5maWx0ZXIoQm9vbGVhbikgOiBbXSk7XG5cbiAgaWYgKHRpbWVvdXQgfHwgbGVuZ3RoKSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICBsZXQgYWJvcnRlZDtcblxuICAgIGNvbnN0IG9uYWJvcnQgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBpZiAoIWFib3J0ZWQpIHtcbiAgICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIGNvbnN0IGVyciA9IHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yID8gcmVhc29uIDogdGhpcy5yZWFzb247XG4gICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZXJyIGluc3RhbmNlb2YgQXhpb3NFcnJvciA/IGVyciA6IG5ldyBDYW5jZWxlZEVycm9yKGVyciBpbnN0YW5jZW9mIEVycm9yID8gZXJyLm1lc3NhZ2UgOiBlcnIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgdGltZXIgPSB0aW1lb3V0ICYmIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGltZXIgPSBudWxsO1xuICAgICAgb25hYm9ydChuZXcgQXhpb3NFcnJvcihgdGltZW91dCAke3RpbWVvdXR9IG9mIG1zIGV4Y2VlZGVkYCwgQXhpb3NFcnJvci5FVElNRURPVVQpKVxuICAgIH0sIHRpbWVvdXQpXG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9ICgpID0+IHtcbiAgICAgIGlmIChzaWduYWxzKSB7XG4gICAgICAgIHRpbWVyICYmIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gbnVsbDtcbiAgICAgICAgc2lnbmFscy5mb3JFYWNoKHNpZ25hbCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnVuc3Vic2NyaWJlID8gc2lnbmFsLnVuc3Vic2NyaWJlKG9uYWJvcnQpIDogc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzaWduYWxzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzaWduYWxzLmZvckVhY2goKHNpZ25hbCkgPT4gc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25hYm9ydCkpO1xuXG4gICAgY29uc3Qge3NpZ25hbH0gPSBjb250cm9sbGVyO1xuXG4gICAgc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdXRpbHMuYXNhcCh1bnN1YnNjcmliZSk7XG5cbiAgICByZXR1cm4gc2lnbmFsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2VTaWduYWxzO1xuIiwiXG5leHBvcnQgY29uc3Qgc3RyZWFtQ2h1bmsgPSBmdW5jdGlvbiogKGNodW5rLCBjaHVua1NpemUpIHtcbiAgbGV0IGxlbiA9IGNodW5rLmJ5dGVMZW5ndGg7XG5cbiAgaWYgKCFjaHVua1NpemUgfHwgbGVuIDwgY2h1bmtTaXplKSB7XG4gICAgeWllbGQgY2h1bms7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBlbmQ7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgIGVuZCA9IHBvcyArIGNodW5rU2l6ZTtcbiAgICB5aWVsZCBjaHVuay5zbGljZShwb3MsIGVuZCk7XG4gICAgcG9zID0gZW5kO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCByZWFkQnl0ZXMgPSBhc3luYyBmdW5jdGlvbiogKGl0ZXJhYmxlLCBjaHVua1NpemUpIHtcbiAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiByZWFkU3RyZWFtKGl0ZXJhYmxlKSkge1xuICAgIHlpZWxkKiBzdHJlYW1DaHVuayhjaHVuaywgY2h1bmtTaXplKTtcbiAgfVxufVxuXG5jb25zdCByZWFkU3RyZWFtID0gYXN5bmMgZnVuY3Rpb24qIChzdHJlYW0pIHtcbiAgaWYgKHN0cmVhbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pIHtcbiAgICB5aWVsZCogc3RyZWFtO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgdHJ5IHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBjb25zdCB7ZG9uZSwgdmFsdWV9ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGF3YWl0IHJlYWRlci5jYW5jZWwoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdHJhY2tTdHJlYW0gPSAoc3RyZWFtLCBjaHVua1NpemUsIG9uUHJvZ3Jlc3MsIG9uRmluaXNoKSA9PiB7XG4gIGNvbnN0IGl0ZXJhdG9yID0gcmVhZEJ5dGVzKHN0cmVhbSwgY2h1bmtTaXplKTtcblxuICBsZXQgYnl0ZXMgPSAwO1xuICBsZXQgZG9uZTtcbiAgbGV0IF9vbkZpbmlzaCA9IChlKSA9PiB7XG4gICAgaWYgKCFkb25lKSB7XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgIG9uRmluaXNoICYmIG9uRmluaXNoKGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qge2RvbmUsIHZhbHVlfSA9IGF3YWl0IGl0ZXJhdG9yLm5leHQoKTtcblxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgX29uRmluaXNoKCk7XG4gICAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBsZW4gPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICBpZiAob25Qcm9ncmVzcykge1xuICAgICAgICAgIGxldCBsb2FkZWRCeXRlcyA9IGJ5dGVzICs9IGxlbjtcbiAgICAgICAgICBvblByb2dyZXNzKGxvYWRlZEJ5dGVzKTtcbiAgICAgICAgfVxuICAgICAgICBjb250cm9sbGVyLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfb25GaW5pc2goZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2FuY2VsKHJlYXNvbikge1xuICAgICAgX29uRmluaXNoKHJlYXNvbik7XG4gICAgICByZXR1cm4gaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgfVxuICB9LCB7XG4gICAgaGlnaFdhdGVyTWFyazogMlxuICB9KVxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gXCIuLi9wbGF0Zm9ybS9pbmRleC5qc1wiO1xuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi91dGlscy5qc1wiO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuaW1wb3J0IGNvbXBvc2VTaWduYWxzIGZyb20gXCIuLi9oZWxwZXJzL2NvbXBvc2VTaWduYWxzLmpzXCI7XG5pbXBvcnQge3RyYWNrU3RyZWFtfSBmcm9tIFwiLi4vaGVscGVycy90cmFja1N0cmVhbS5qc1wiO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCB7cHJvZ3Jlc3NFdmVudFJlZHVjZXIsIHByb2dyZXNzRXZlbnREZWNvcmF0b3IsIGFzeW5jRGVjb3JhdG9yfSBmcm9tIFwiLi4vaGVscGVycy9wcm9ncmVzc0V2ZW50UmVkdWNlci5qc1wiO1xuaW1wb3J0IHJlc29sdmVDb25maWcgZnJvbSBcIi4uL2hlbHBlcnMvcmVzb2x2ZUNvbmZpZy5qc1wiO1xuaW1wb3J0IHNldHRsZSBmcm9tIFwiLi4vY29yZS9zZXR0bGUuanNcIjtcblxuY29uc3QgaXNGZXRjaFN1cHBvcnRlZCA9IHR5cGVvZiBmZXRjaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgUmVzcG9uc2UgPT09ICdmdW5jdGlvbic7XG5jb25zdCBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gaXNGZXRjaFN1cHBvcnRlZCAmJiB0eXBlb2YgUmVhZGFibGVTdHJlYW0gPT09ICdmdW5jdGlvbic7XG5cbi8vIHVzZWQgb25seSBpbnNpZGUgdGhlIGZldGNoIGFkYXB0ZXJcbmNvbnN0IGVuY29kZVRleHQgPSBpc0ZldGNoU3VwcG9ydGVkICYmICh0eXBlb2YgVGV4dEVuY29kZXIgPT09ICdmdW5jdGlvbicgP1xuICAgICgoZW5jb2RlcikgPT4gKHN0cikgPT4gZW5jb2Rlci5lbmNvZGUoc3RyKSkobmV3IFRleHRFbmNvZGVyKCkpIDpcbiAgICBhc3luYyAoc3RyKSA9PiBuZXcgVWludDhBcnJheShhd2FpdCBuZXcgUmVzcG9uc2Uoc3RyKS5hcnJheUJ1ZmZlcigpKVxuKTtcblxuY29uc3QgdGVzdCA9IChmbiwgLi4uYXJncykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiAhIWZuKC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuY29uc3Qgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtID0gaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCAmJiB0ZXN0KCgpID0+IHtcbiAgbGV0IGR1cGxleEFjY2Vzc2VkID0gZmFsc2U7XG5cbiAgY29uc3QgaGFzQ29udGVudFR5cGUgPSBuZXcgUmVxdWVzdChwbGF0Zm9ybS5vcmlnaW4sIHtcbiAgICBib2R5OiBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBnZXQgZHVwbGV4KCkge1xuICAgICAgZHVwbGV4QWNjZXNzZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuICdoYWxmJztcbiAgICB9LFxuICB9KS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJyk7XG5cbiAgcmV0dXJuIGR1cGxleEFjY2Vzc2VkICYmICFoYXNDb250ZW50VHlwZTtcbn0pO1xuXG5jb25zdCBERUZBVUxUX0NIVU5LX1NJWkUgPSA2NCAqIDEwMjQ7XG5cbmNvbnN0IHN1cHBvcnRzUmVzcG9uc2VTdHJlYW0gPSBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkICYmXG4gIHRlc3QoKCkgPT4gdXRpbHMuaXNSZWFkYWJsZVN0cmVhbShuZXcgUmVzcG9uc2UoJycpLmJvZHkpKTtcblxuXG5jb25zdCByZXNvbHZlcnMgPSB7XG4gIHN0cmVhbTogc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAoKHJlcykgPT4gcmVzLmJvZHkpXG59O1xuXG5pc0ZldGNoU3VwcG9ydGVkICYmICgoKHJlcykgPT4ge1xuICBbJ3RleHQnLCAnYXJyYXlCdWZmZXInLCAnYmxvYicsICdmb3JtRGF0YScsICdzdHJlYW0nXS5mb3JFYWNoKHR5cGUgPT4ge1xuICAgICFyZXNvbHZlcnNbdHlwZV0gJiYgKHJlc29sdmVyc1t0eXBlXSA9IHV0aWxzLmlzRnVuY3Rpb24ocmVzW3R5cGVdKSA/IChyZXMpID0+IHJlc1t0eXBlXSgpIDpcbiAgICAgIChfLCBjb25maWcpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoYFJlc3BvbnNlIHR5cGUgJyR7dHlwZX0nIGlzIG5vdCBzdXBwb3J0ZWRgLCBBeGlvc0Vycm9yLkVSUl9OT1RfU1VQUE9SVCwgY29uZmlnKTtcbiAgICAgIH0pXG4gIH0pO1xufSkobmV3IFJlc3BvbnNlKSk7XG5cbmNvbnN0IGdldEJvZHlMZW5ndGggPSBhc3luYyAoYm9keSkgPT4ge1xuICBpZiAoYm9keSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBpZih1dGlscy5pc0Jsb2IoYm9keSkpIHtcbiAgICByZXR1cm4gYm9keS5zaXplO1xuICB9XG5cbiAgaWYodXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShib2R5KSkge1xuICAgIGNvbnN0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QocGxhdGZvcm0ub3JpZ2luLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHksXG4gICAgfSk7XG4gICAgcmV0dXJuIChhd2FpdCBfcmVxdWVzdC5hcnJheUJ1ZmZlcigpKS5ieXRlTGVuZ3RoO1xuICB9XG5cbiAgaWYodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkgfHwgdXRpbHMuaXNBcnJheUJ1ZmZlcihib2R5KSkge1xuICAgIHJldHVybiBib2R5LmJ5dGVMZW5ndGg7XG4gIH1cblxuICBpZih1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhib2R5KSkge1xuICAgIGJvZHkgPSBib2R5ICsgJyc7XG4gIH1cblxuICBpZih1dGlscy5pc1N0cmluZyhib2R5KSkge1xuICAgIHJldHVybiAoYXdhaXQgZW5jb2RlVGV4dChib2R5KSkuYnl0ZUxlbmd0aDtcbiAgfVxufVxuXG5jb25zdCByZXNvbHZlQm9keUxlbmd0aCA9IGFzeW5jIChoZWFkZXJzLCBib2R5KSA9PiB7XG4gIGNvbnN0IGxlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKGhlYWRlcnMuZ2V0Q29udGVudExlbmd0aCgpKTtcblxuICByZXR1cm4gbGVuZ3RoID09IG51bGwgPyBnZXRCb2R5TGVuZ3RoKGJvZHkpIDogbGVuZ3RoO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0ZldGNoU3VwcG9ydGVkICYmIChhc3luYyAoY29uZmlnKSA9PiB7XG4gIGxldCB7XG4gICAgdXJsLFxuICAgIG1ldGhvZCxcbiAgICBkYXRhLFxuICAgIHNpZ25hbCxcbiAgICBjYW5jZWxUb2tlbixcbiAgICB0aW1lb3V0LFxuICAgIG9uRG93bmxvYWRQcm9ncmVzcyxcbiAgICBvblVwbG9hZFByb2dyZXNzLFxuICAgIHJlc3BvbnNlVHlwZSxcbiAgICBoZWFkZXJzLFxuICAgIHdpdGhDcmVkZW50aWFscyA9ICdzYW1lLW9yaWdpbicsXG4gICAgZmV0Y2hPcHRpb25zXG4gIH0gPSByZXNvbHZlQ29uZmlnKGNvbmZpZyk7XG5cbiAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gKHJlc3BvbnNlVHlwZSArICcnKS50b0xvd2VyQ2FzZSgpIDogJ3RleHQnO1xuXG4gIGxldCBjb21wb3NlZFNpZ25hbCA9IGNvbXBvc2VTaWduYWxzKFtzaWduYWwsIGNhbmNlbFRva2VuICYmIGNhbmNlbFRva2VuLnRvQWJvcnRTaWduYWwoKV0sIHRpbWVvdXQpO1xuXG4gIGxldCByZXF1ZXN0O1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlID0gY29tcG9zZWRTaWduYWwgJiYgY29tcG9zZWRTaWduYWwudW5zdWJzY3JpYmUgJiYgKCgpID0+IHtcbiAgICAgIGNvbXBvc2VkU2lnbmFsLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuXG4gIGxldCByZXF1ZXN0Q29udGVudExlbmd0aDtcblxuICB0cnkge1xuICAgIGlmIChcbiAgICAgIG9uVXBsb2FkUHJvZ3Jlc3MgJiYgc3VwcG9ydHNSZXF1ZXN0U3RyZWFtICYmIG1ldGhvZCAhPT0gJ2dldCcgJiYgbWV0aG9kICE9PSAnaGVhZCcgJiZcbiAgICAgIChyZXF1ZXN0Q29udGVudExlbmd0aCA9IGF3YWl0IHJlc29sdmVCb2R5TGVuZ3RoKGhlYWRlcnMsIGRhdGEpKSAhPT0gMFxuICAgICkge1xuICAgICAgbGV0IF9yZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBkYXRhLFxuICAgICAgICBkdXBsZXg6IFwiaGFsZlwiXG4gICAgICB9KTtcblxuICAgICAgbGV0IGNvbnRlbnRUeXBlSGVhZGVyO1xuXG4gICAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSAmJiAoY29udGVudFR5cGVIZWFkZXIgPSBfcmVxdWVzdC5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykpKSB7XG4gICAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoY29udGVudFR5cGVIZWFkZXIpXG4gICAgICB9XG5cbiAgICAgIGlmIChfcmVxdWVzdC5ib2R5KSB7XG4gICAgICAgIGNvbnN0IFtvblByb2dyZXNzLCBmbHVzaF0gPSBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICAgIHJlcXVlc3RDb250ZW50TGVuZ3RoLFxuICAgICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uVXBsb2FkUHJvZ3Jlc3MpKVxuICAgICAgICApO1xuXG4gICAgICAgIGRhdGEgPSB0cmFja1N0cmVhbShfcmVxdWVzdC5ib2R5LCBERUZBVUxUX0NIVU5LX1NJWkUsIG9uUHJvZ3Jlc3MsIGZsdXNoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXV0aWxzLmlzU3RyaW5nKHdpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHdpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdvbWl0JztcbiAgICB9XG5cbiAgICAvLyBDbG91ZGZsYXJlIFdvcmtlcnMgdGhyb3dzIHdoZW4gY3JlZGVudGlhbHMgYXJlIGRlZmluZWRcbiAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkZmxhcmUvd29ya2VyZC9pc3N1ZXMvOTAyXG4gICAgY29uc3QgaXNDcmVkZW50aWFsc1N1cHBvcnRlZCA9IFwiY3JlZGVudGlhbHNcIiBpbiBSZXF1ZXN0LnByb3RvdHlwZTtcbiAgICByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCB7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBzaWduYWw6IGNvbXBvc2VkU2lnbmFsLFxuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnMubm9ybWFsaXplKCkudG9KU09OKCksXG4gICAgICBib2R5OiBkYXRhLFxuICAgICAgZHVwbGV4OiBcImhhbGZcIixcbiAgICAgIGNyZWRlbnRpYWxzOiBpc0NyZWRlbnRpYWxzU3VwcG9ydGVkID8gd2l0aENyZWRlbnRpYWxzIDogdW5kZWZpbmVkXG4gICAgfSk7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcblxuICAgIGNvbnN0IGlzU3RyZWFtUmVzcG9uc2UgPSBzdXBwb3J0c1Jlc3BvbnNlU3RyZWFtICYmIChyZXNwb25zZVR5cGUgPT09ICdzdHJlYW0nIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3Jlc3BvbnNlJyk7XG5cbiAgICBpZiAoc3VwcG9ydHNSZXNwb25zZVN0cmVhbSAmJiAob25Eb3dubG9hZFByb2dyZXNzIHx8IChpc1N0cmVhbVJlc3BvbnNlICYmIHVuc3Vic2NyaWJlKSkpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB7fTtcblxuICAgICAgWydzdGF0dXMnLCAnc3RhdHVzVGV4dCcsICdoZWFkZXJzJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgb3B0aW9uc1twcm9wXSA9IHJlc3BvbnNlW3Byb3BdO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlQ29udGVudExlbmd0aCA9IHV0aWxzLnRvRmluaXRlTnVtYmVyKHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LWxlbmd0aCcpKTtcblxuICAgICAgY29uc3QgW29uUHJvZ3Jlc3MsIGZsdXNoXSA9IG9uRG93bmxvYWRQcm9ncmVzcyAmJiBwcm9ncmVzc0V2ZW50RGVjb3JhdG9yKFxuICAgICAgICByZXNwb25zZUNvbnRlbnRMZW5ndGgsXG4gICAgICAgIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGFzeW5jRGVjb3JhdG9yKG9uRG93bmxvYWRQcm9ncmVzcyksIHRydWUpXG4gICAgICApIHx8IFtdO1xuXG4gICAgICByZXNwb25zZSA9IG5ldyBSZXNwb25zZShcbiAgICAgICAgdHJhY2tTdHJlYW0ocmVzcG9uc2UuYm9keSwgREVGQVVMVF9DSFVOS19TSVpFLCBvblByb2dyZXNzLCAoKSA9PiB7XG4gICAgICAgICAgZmx1c2ggJiYgZmx1c2goKTtcbiAgICAgICAgICB1bnN1YnNjcmliZSAmJiB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNwb25zZVR5cGUgPSByZXNwb25zZVR5cGUgfHwgJ3RleHQnO1xuXG4gICAgbGV0IHJlc3BvbnNlRGF0YSA9IGF3YWl0IHJlc29sdmVyc1t1dGlscy5maW5kS2V5KHJlc29sdmVycywgcmVzcG9uc2VUeXBlKSB8fCAndGV4dCddKHJlc3BvbnNlLCBjb25maWcpO1xuXG4gICAgIWlzU3RyZWFtUmVzcG9uc2UgJiYgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgaGVhZGVyczogQXhpb3NIZWFkZXJzLmZyb20ocmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3RcbiAgICAgIH0pXG4gICAgfSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdW5zdWJzY3JpYmUgJiYgdW5zdWJzY3JpYmUoKTtcblxuICAgIGlmIChlcnIgJiYgZXJyLm5hbWUgPT09ICdUeXBlRXJyb3InICYmIC9mZXRjaC9pLnRlc3QoZXJyLm1lc3NhZ2UpKSB7XG4gICAgICB0aHJvdyBPYmplY3QuYXNzaWduKFxuICAgICAgICBuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCksXG4gICAgICAgIHtcbiAgICAgICAgICBjYXVzZTogZXJyLmNhdXNlIHx8IGVyclxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuXG4gICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGVyciwgZXJyICYmIGVyci5jb2RlLCBjb25maWcsIHJlcXVlc3QpO1xuICB9XG59KTtcblxuXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IGh0dHBBZGFwdGVyIGZyb20gJy4vaHR0cC5qcyc7XG5pbXBvcnQgeGhyQWRhcHRlciBmcm9tICcuL3hoci5qcyc7XG5pbXBvcnQgZmV0Y2hBZGFwdGVyIGZyb20gJy4vZmV0Y2guanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyLFxuICBmZXRjaDogZmV0Y2hBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS43LjdcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgICAgZXJyLnN0YWNrID0gc3RhY2s7XG4gICAgICAgICAgICAvLyBtYXRjaCB3aXRob3V0IHRoZSAyIHRvcCBzdGFjayBsaW5lc1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgICAgZXJyLnN0YWNrICs9ICdcXG4nICsgc3RhY2tcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpZ25vcmUgdGhlIGNhc2Ugd2hlcmUgXCJzdGFja1wiIGlzIGFuIHVuLXdyaXRhYmxlIHByb3BlcnR5XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIF9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzID0gaGVhZGVycyAmJiB1dGlscy5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgdG9BYm9ydFNpZ25hbCgpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgY29uc3QgYWJvcnQgPSAoZXJyKSA9PiB7XG4gICAgICBjb250cm9sbGVyLmFib3J0KGVycik7XG4gICAgfTtcblxuICAgIHRoaXMuc3Vic2NyaWJlKGFib3J0KTtcblxuICAgIGNvbnRyb2xsZXIuc2lnbmFsLnVuc3Vic2NyaWJlID0gKCkgPT4gdGhpcy51bnN1YnNjcmliZShhYm9ydCk7XG5cbiAgICByZXR1cm4gY29udHJvbGxlci5zaWduYWw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICAgKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICAgKi9cbiAgc3RhdGljIHNvdXJjZSgpIHtcbiAgICBsZXQgY2FuY2VsO1xuICAgIGNvbnN0IHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgIGNhbmNlbCA9IGM7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRva2VuLFxuICAgICAgY2FuY2VsXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSAnLi9hZGFwdGVycy9hZGFwdGVycy5qcyc7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5nZXRBZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcjtcblxuYXhpb3MuSHR0cFN0YXR1c0NvZGUgPSBIdHRwU3RhdHVzQ29kZTtcblxuYXhpb3MuZGVmYXVsdCA9IGF4aW9zO1xuXG4vLyB0aGlzIG1vZHVsZSBzaG91bGQgb25seSBoYXZlIGEgZGVmYXVsdCBleHBvcnRcbmV4cG9ydCBkZWZhdWx0IGF4aW9zXG4iLCJpbXBvcnQgZGIsIHtNZXNzYWdlLCBTYXZlZENvbnZlcnNhdGlvbn0gZnJvbSBcIi4vZGJcIjtcbmltcG9ydCB7Q2hhdENvbXBsZXRpb25NZXNzYWdlUGFyYW19IGZyb20gXCJvcGVuYWkvc3JjL3Jlc291cmNlcy9jaGF0L2NvbXBsZXRpb25zXCI7XG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmNsYXNzIENvbnZlcnNhdGlvbiB7XG4gICAgaWRcbiAgICBkYXRhXG4gICAgbWVzc2FnZXNcblxuICAgIGNvbnN0cnVjdG9yKGM6IFNhdmVkQ29udmVyc2F0aW9uLCBtZXNzYWdlczogTWVzc2FnZVtdKSB7XG4gICAgICAgIHRoaXMuaWQgPSBjLmlkXG4gICAgICAgIHRoaXMuZGF0YSA9IGNcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG1lc3NhZ2VzXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QWxsQ29udmVyc2F0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIGRiLmNvbnZlcnNhdGlvbi5saXN0KClcbiAgICB9XG5cbiAgICBnZXRNZXNzYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIGRiLm1lc3NhZ2VzLmdldEJ5Q29udmVyc2F0aW9uKHRoaXMuaWQpO1xuICAgIH1cblxuICAgIGFzeW5jIGRyYXdNZXNzYWdlcygpIHtcbiAgICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0IGRiLm1lc3NhZ2VzLmdldEJ5Q29udmVyc2F0aW9uKHRoaXMuaWQpO1xuICAgICAgIGNvbnN0IHJvb3RFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlUm9vdCcpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbm5lcicpO1xuICAgICAgIGNvbnNvbGUubG9nKHttZXNzYWdlcywgcm9vdEVsfSlcbiAgICAgICBpZiAoIXJvb3RFbCkge1xuICAgICAgICAgICBjb25zb2xlLmxvZygnbm8gcm9vdCBmb3VuZCBmb3IgbWVzc2FnZXMnKVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgfVxuXG4gICAgICAgcm9vdEVsLmlubmVySFRNTCA9ICcnXG5cbiAgICAgICAgY29uc29sZS5sb2coe21lc3NhZ2VzfSlcbiAgICAgICAgLy8gY29uc3QgbWVzc2FnZXMgPSBbJ2ZpcnN0JywgJ3NlY29uZCcsICd0aGlyZCddXG4gICAgICAgbWVzc2FnZXMubWFwKG0gPT4gdGhpcy5hZGRNZXNzYWdlVG9ET00obSkpXG4gICAgfVxuXG5cbiAgICBhc3luYyBhZGRNZXNzYWdlVG9ET00obWVzc2FnZTogTWVzc2FnZSkge1xuICAgICAgICBjb25zdCByb290RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVzc2FnZVJvb3QnKTtcbiAgICAgICAgaWYgKCFyb290RWwpIHJldHVybjtcbiAgICAgICAgLy8gY29uc3QgZWwgPSAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndXNlci1tZXNzYWdlJylcbiAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9sZSA9PT0gJ3VzZXInKSBkaXYuaW5uZXJIVE1MID0gYDx1c2VyLW1lc3NhZ2U+JHttZXNzYWdlLmNvbnRlbnR9PC91c2VyLW1lc3NhZ2U+YDtcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9sZSA9PT0gJ2Fzc2lzdGFudCcpIGRpdi5pbm5lckhUTUwgPSBgPGFzc2lzdGFudC1tZXNzYWdlPiR7bWVzc2FnZS5jb250ZW50fTwvYXNzaXN0YW50LW1lc3NhZ2U+YDtcblxuICAgICAgICAvLyBlbC5pbm5lclRleHQgPSBtXG4gICAgICAgIHJvb3RFbD8uYXBwZW5kQ2hpbGQoZGl2KVxuICAgIH1cblxuICAgIGFzeW5jIGhhbmRsZVVzZXJJbnB1dChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJoYW5kbGluZ1wiKVxuICAgICAgICAvLyAgR2V0IHZhbHVlXG4gICAgICAgIGNvbnN0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yPEhUTUxJbnB1dEVsZW1lbnQ+KCcjdXNlci1pbnB1dCcpO1xuICAgICAgICBpZighaW5wdXQpIHJldHVyblxuICAgICAgICBjb25zdCBjb250ZW50ID0gaW5wdXQudmFsdWU7XG4gICAgICAgIGlmIChjb250ZW50LnRyaW0oKSA9PT0gJycpIHJldHVybjsgLy8gRG9uJ3Qgc2VuZCBlbXB0eSBjb250ZW50XG5cbiAgICAgICAgLy8gU2F2ZSBtZXNzYWdlIHRvIGRiXG4gICAgICAgIGNvbnN0IHNhdmVkVXNlck1lc3NhZ2UgPSBhd2FpdCBkYi5tZXNzYWdlcy5jcmVhdGUodGhpcy5pZCwge3JvbGU6ICd1c2VyJywgY29udGVudH0pXG4gICAgICAgIGF3YWl0IHRoaXMuYWRkTWVzc2FnZVRvRE9NKHNhdmVkVXNlck1lc3NhZ2UpXG5cbiAgICAgICAgLy8gR2V0IHBhc3QgbWVzc2FnZXNcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCAod2luZG93IGFzIGFueSkuZ29DaGF0LmNvbnZlcnNhdGlvbi5nZXRNZXNzYWdlcygpXG4gICAgICAgIGNvbnN0IG9wZW5NZXNzYWdlcyA9IG1lc3NhZ2VzLm1hcCgobTogTWVzc2FnZSkgPT4gKHtyb2xlOiBtLnJvbGUsIGNvbnRlbnQ6IG0uY29udGVudH0pKVxuXG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QoYC9zZW5kLW1lc3NhZ2VgLCB7bWVzc2FnZXM6IG9wZW5NZXNzYWdlc30pXG4gICAgICAgIGlmKHJlcy5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZWRBc3Npc3RhbnRNZXNzYWdlID0gYXdhaXQgZGIubWVzc2FnZXMuY3JlYXRlKHRoaXMuaWQsIHtyb2xlOiAnYXNzaXN0YW50JywgY29udGVudDogcmVzLmRhdGEuY29udGVudH0pXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZE1lc3NhZ2VUb0RPTShzYXZlZEFzc2lzdGFudE1lc3NhZ2UpXG4gICAgICAgIH1cblxuXG5cblxuXG4gICAgICAgIC8vIENsZWFyIHRoZSBpbnB1dCBmaWVsZFxuICAgICAgICBpbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgICAgIC8vIElmIG1lc3NhZ2UgaXMgZmlyc3QsIG1ha2UgaXQgdGhlIHRpdGxlXG4gICAgICAgIGlmKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMSkgZGIuY29udmVyc2F0aW9uLnVwZGF0ZSh7Li4udGhpcy5kYXRhLCB0aXRsZTogY29udGVudH0pXG4gICAgfVxuXG4gICAgYXN5bmMgaGFuZGxlU2VydmVyUmVzcG9uc2UocjogYW55KSB7XG4gICAgICAgIGNvbnN0IHtjb250ZW50fSA9IEpTT04ucGFyc2UocilcbiAgICAgICAgY29uc3Qgc2F2ZWRNZXNzYWdlID0gYXdhaXQgZGIubWVzc2FnZXMuY3JlYXRlKHRoaXMuaWQsIHtyb2xlOiAnYXNzaXN0YW50JywgY29udGVudH0pXG4gICAgICAgIGF3YWl0IHRoaXMuYWRkTWVzc2FnZVRvRE9NKHNhdmVkTWVzc2FnZSlcbiAgICAgICAgLy8gIFRvZG86IGhhbmRsZSBleGNlcHRpb25zXG4gICAgfVxuXG4gICAgYXN5bmMgZGVsZXRlKCkge1xuICAgICAgICBjb25zb2xlLmxvZyh7ZGVsZXRpbmc6IHRoaXMuaWR9KVxuICAgICAgICBhd2FpdCBkYi5jb252ZXJzYXRpb24uZGVsZXRlKHRoaXMuaWQpXG4gICAgfVxuXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0Q29udmVyc2F0aW9uKGlkOiBzdHJpbmcsIGlzTmV3OiBib29sZWFuKSB7XG4gICAgdHJ5IHtcblxuXG4gICAgY29uc3Qgc2F2ZWRDb252ZXJzYXRpb24gPSBpc05ldyA/ICBhd2FpdCBkYi5jb252ZXJzYXRpb24uY3JlYXRlKGlkKSA6IGF3YWl0IGRiLmNvbnZlcnNhdGlvbi5nZXQoaWQpXG4gICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsICcnLHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyBgL2MvJHtpZH1gKTtcblxuXG4gICAvLyAgVG9kbzogcmVkaXJlY3QgdG8gNDA0IHBhZ2Ugb3Igc29tZXRoaW5nIGVsc2VcbiAgIGlmKCFzYXZlZENvbnZlcnNhdGlvbikge1xuICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIk5PIENPTlZFUlNBVElPTiBGT1VORCBGT1I6XCIsIGlkKVxuICAgfVxuXG4gICAgaWYoIXNhdmVkQ29udmVyc2F0aW9uKSB0aHJvdyBFcnJvcihcImZhaWxlZCBzYXZpbmcgY29udmVyc2F0aW9uXCIpXG4gICAgY29uc3QgbWVzc2FnZXMgPSBhd2FpdCBkYi5tZXNzYWdlcy5nZXRCeUNvbnZlcnNhdGlvbihpZCk7XG4gICAgY29uc29sZS5sb2coezE6IG1lc3NhZ2VzfSlcbiAgICBjb25zdCBjb252ZXJzYXRpb24gPSBuZXcgQ29udmVyc2F0aW9uKHNhdmVkQ29udmVyc2F0aW9uLCBtZXNzYWdlcyk7XG4gICAgKHdpbmRvdyBhcyBhbnkpLmdvQ2hhdC5jb252ZXJzYXRpb24gPSBjb252ZXJzYXRpb25cblxuICAgYXdhaXQgY29udmVyc2F0aW9uLmRyYXdNZXNzYWdlcygpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHtlcnJ9KVxuICAgIH1cblxufSIsImltcG9ydCBkYiBmcm9tIFwiLi9kYlwiO1xuXG5jbGFzcyBVc2VyTWVzc2FnZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKVxuXG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwidy1mdWxsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4gcHgtNSBtYi0zIG1heC13LTV4bCBteC1hdXRvIHJvdW5kZWQtbGcgZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWVuZCBwYi0xXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3VuZGVkLWxnIGJnLXNsYXRlLTcwMCBweC0yIHB5LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPiR7dGhpcy5pbm5lclRleHR9PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG59XG5cbmNsYXNzIFJlY2VudENvbnZlcnNhdGlvbiBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCAnJztcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJztcblxuICAgICAgICAvLyBJbmplY3QgdGhlIEhUTUwgY29udGVudCBpbnRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JvdXAgY3Vyc29yLXBvaW50ZXIgb3BhY2l0eS03MCBob3ZlcjpvcGFjaXR5LTEwMCB0cmFuc2l0aW9uLWFsbCBmbGV4IGdhcC0yIGl0ZW1zLWNlbnRlciBtYi0xIG1heC13LTJ4bFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtM1wiICBoeC1nZXQ9XCIvYy8ke2lkfVwiIGh4LXRhcmdldD1cIiNpbm5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1hdGVyaWFsLXN5bWJvbHMtb3V0bGluZWQgdGV4dC1zbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ydW1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke3RpdGxlfSA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJkZWxldGVCdG5cIiBjbGFzcz1cImdyb3VwLWhvdmVyOm9wYWNpdHktMTAwIG9wYWNpdHktMCBtYXRlcmlhbC1zeW1ib2xzLW91dGxpbmVkIHRleHQtc20gbWwtYXV0b1wiPlxuICAgICAgICAgICAgICAgICAgICBkZWxldGVcbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIGA7XG5cbiAgICAgICAgdGhpcy5xdWVyeVNlbGVjdG9yKCcjZGVsZXRlQnRuJyk/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICBkYi5jb252ZXJzYXRpb24uZGVsZXRlKGlkKTtcbiAgICAgICAgICAgICh3aW5kb3cgYXMgYW55KS5nb0NoYXQucmVjZW50Q29udmVyc2F0aW9ucy5pbml0KClcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFkZCB0aGUgY2xpY2sgZXZlbnQgbGlzdGVuZXJcbiAgICAgICAgLy8gdGhpcy5xdWVyeVNlbGVjdG9yKCdkaXYnKT8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICAod2luZG93IGFzIGFueSkuZ29DaGF0LmluaXRDb252ZXJzYXRpb24oaWQsIGZhbHNlKTtcbiAgICAgICAgLy8gICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIGAvYy8ke2lkfWA7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIEVuc3VyZSBIVE1YIHByb2Nlc3NlcyB0aGlzIG5ldyBIVE1MIGFmdGVyIGl0IGhhcyBiZWVuIGFkZGVkIHRvIHRoZSBET01cbiAgICAgICAgKHdpbmRvdyBhcyBhbnkpLmh0bXgucHJvY2Vzcyh0aGlzKTtcbiAgICB9XG59XG5cblxuXG4gICAgY2xhc3MgQXNzaXN0YW50TWVzc2FnZSBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAvLyBJbmplY3QgdGhlIEhUTUwgY29udGVudCBpbnRvIHRoZSBjb21wb25lbnRcbiAgICAgICAgICAgIHRoaXMuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGdhcC02IG1heC13LTV4bFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2Plx0XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGh4LWdldD1cIi9jb21wb25lbnQvYXZhdGFyXCIgaHgtdHJpZ2dlcj1cImxvYWRcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImZvbnQtYm9sZCBtYi0xXCI+bW9kZWxuYW1lPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJtYXgtdy0yeGxcIj4ke3RoaXMuaW5uZXJUZXh0fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuXG4gICAgICAgICAgICAvLyBFbnN1cmUgSFRNWCBwcm9jZXNzZXMgdGhpcyBuZXcgSFRNTCBhZnRlciBpdCBoYXMgYmVlbiBhZGRlZCB0byB0aGUgRE9NXG4gICAgICAgICAgICAod2luZG93IGFzIGFueSkuaHRteC5wcm9jZXNzKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxuXG5cblxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCd1c2VyLW1lc3NhZ2UnLCBVc2VyTWVzc2FnZSlcbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnYXNzaXN0YW50LW1lc3NhZ2UnLCBBc3Npc3RhbnRNZXNzYWdlKVxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdyZWNlbnQtY29udmVyc2F0aW9uJywgUmVjZW50Q29udmVyc2F0aW9uKSIsIlxuXG5kZWNsYXJlIGNvbnN0IGh0bXg6IGFueTtcblxuXG5cbmh0bXguZGVmaW5lRXh0ZW5zaW9uKFwib3BlbmFpXCIsIHtcbiAgb25FdmVudDogYXN5bmMgZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgZXZ0OiBDdXN0b21FdmVudCkge1xuICAgIGlmIChuYW1lID09PSBcImh0bXg6YmVmb3JlU2VuZFwiKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIGV2dC5kZXRhaWwuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IGF3YWl0ICh3aW5kb3cgYXMgYW55KS5nb0NoYXQuY29udmVyc2F0aW9uLmdldE1lc3NhZ2VzKCk7XG4gICAgICBodG14LmFqYXgoXCJQT1NUXCIsIGBzZW5kLW1lc3NhZ2VgLCB7XG4gICAgICAgIG1lc3NhZ2VzXG4gICAgICB9KTtcbiAgICAgIC8vIGV2dC5kZXRhaWwueGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoanNvbkRhdGEpKTtcbiAgICB9XG4gIH0sXG59KTtcblxuIiwiaW1wb3J0IFwiLi9zdHlsZXMuc2Nzc1wiO1xuaW1wb3J0IHtpbml0Q29udmVyc2F0aW9ufSBmcm9tIFwiLi9jb252ZXJzYXRpb25cIjtcbmltcG9ydCAnLi9jb21wb25lbnRzJ1xuaW1wb3J0IGRiIGZyb20gXCIuL2RiXCI7XG5pbXBvcnQgJy4vaHRteC1vcGVuYWknXG4vLyBNYWtlIHRoZSBmdW5jdGlvbiBhdmFpbGFibGUgb24gdGhlIHdpbmRvdyBvYmplY3RcblxuY29uc29sZS5sb2coJ2hlbGxvIGZyb20gY29udmVyc2F0aW9ucycpO1xuXG5jb25zdCByZWNlbnRDb252ZXJzYXRpb25zID0ge1xuICAgIGluaXQ6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCByb290RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmVjZW50Q29udmVyc2F0aW9uc1Jvb3QnKTtcbiAgICAgICAgaWYgKCFyb290RWwpIHJldHVybjtcbiAgICAgICAgcm9vdEVsLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbnMgPSAgYXdhaXQgZGIuY29udmVyc2F0aW9uLmxpc3QoKVxuICAgICAgICBjb252ZXJzYXRpb25zLm1hcCgoYywgaSkgPT4ge1xuICAgICAgICAgICAgaWYoaSA+IDYpIHJldHVybjtcblxuICAgICAgICAgICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBgPHJlY2VudC1jb252ZXJzYXRpb24gaWQ9XCIke2MuaWR9XCIgdGl0bGU9XCIke2MudGl0bGV9XCI+PC9yZWNlbnQtY29udmVyc2F0aW9uPmA7XG4gICAgICAgICAgICByb290RWw/LmFwcGVuZENoaWxkKGRpdilcbiAgICAgICAgfSlcbiAgICB9LFxufTtcbih3aW5kb3cgYXMgYW55KS5nb0NoYXQgPSB7IGluaXRDb252ZXJzYXRpb24sIHJlY2VudENvbnZlcnNhdGlvbnMgfTtcblxuKGFzeW5jICgpID0+IHtcbiAgIHJlY2VudENvbnZlcnNhdGlvbnMuaW5pdCgpXG5cbn0gKSgpXG5cbi8vIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignaHRteDpsb2FkJywgZnVuY3Rpb24oZXZlbnQpIHtcbi8vICAgICBpZiAodHlwZW9mIGluaXRDaGF0ID09PSAnZnVuY3Rpb24nKSB7XG4vLyAgICAgICAgIGluaXRDaGF0KCk7XG4vLyAgICAgfVxuLy8gfSk7Il0sIm5hbWVzIjpbImluc3RhbmNlT2ZBbnkiLCJvYmplY3QiLCJjb25zdHJ1Y3RvcnMiLCJjIiwiaWRiUHJveHlhYmxlVHlwZXMiLCJjdXJzb3JBZHZhbmNlTWV0aG9kcyIsImdldElkYlByb3h5YWJsZVR5cGVzIiwiZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsInByb21pc2lmeVJlcXVlc3QiLCJyZXF1ZXN0IiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ1bmxpc3RlbiIsInN1Y2Nlc3MiLCJlcnJvciIsIndyYXAiLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJ0eCIsImRvbmUiLCJjb21wbGV0ZSIsImlkYlByb3h5VHJhcHMiLCJ0YXJnZXQiLCJwcm9wIiwicmVjZWl2ZXIiLCJ2YWx1ZSIsInJlcGxhY2VUcmFwcyIsImNhbGxiYWNrIiwid3JhcEZ1bmN0aW9uIiwiZnVuYyIsImFyZ3MiLCJ1bndyYXAiLCJ0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlIiwibmV3VmFsdWUiLCJvcGVuREIiLCJuYW1lIiwidmVyc2lvbiIsImJsb2NrZWQiLCJ1cGdyYWRlIiwiYmxvY2tpbmciLCJ0ZXJtaW5hdGVkIiwib3BlblByb21pc2UiLCJldmVudCIsImRiIiwicmVhZE1ldGhvZHMiLCJ3cml0ZU1ldGhvZHMiLCJjYWNoZWRNZXRob2RzIiwiZ2V0TWV0aG9kIiwidGFyZ2V0RnVuY05hbWUiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJtZXRob2QiLCJzdG9yZU5hbWUiLCJvbGRUcmFwcyIsImFkdmFuY2VNZXRob2RQcm9wcyIsIm1ldGhvZE1hcCIsImFkdmFuY2VSZXN1bHRzIiwiaXR0clByb3hpZWRDdXJzb3JUb09yaWdpbmFsUHJveHkiLCJjdXJzb3JJdGVyYXRvclRyYXBzIiwiY2FjaGVkRnVuYyIsIml0ZXJhdGUiLCJjdXJzb3IiLCJwcm94aWVkQ3Vyc29yIiwiaXNJdGVyYXRvclByb3AiLCJ1cmxBbHBoYWJldCIsIm5hbm9pZCIsInNpemUiLCJpZCIsImJ5dGVzIiwic2NvcGVkVXJsQWxwaGFiZXQiLCJpbml0IiwiY3JlYXRlQ29udmVyc2F0aW9uIiwiZ2V0Q29udmVyc2F0aW9uIiwidXBkYXRlQ29udmVyc2F0aW9uIiwiZGVsZXRlQ29udmVyc2F0aW9uIiwibGlzdENvbnZlcnNhdGlvbnMiLCJhIiwiYiIsImNyZWF0ZU1lc3NhZ2UiLCJjb252ZXJzYXRpb25JZCIsIm1lc3NhZ2UiLCJnZXRNZXNzYWdlc0ZvckNvbnZlcnNhdGlvbiIsIm1lc3NhZ2VzIiwiYmluZCIsImZuIiwidGhpc0FyZyIsInRvU3RyaW5nIiwiZ2V0UHJvdG90eXBlT2YiLCJraW5kT2YiLCJjYWNoZSIsInRoaW5nIiwic3RyIiwia2luZE9mVGVzdCIsInR5cGUiLCJ0eXBlT2ZUZXN0IiwiaXNBcnJheSIsImlzVW5kZWZpbmVkIiwiaXNCdWZmZXIiLCJ2YWwiLCJpc0Z1bmN0aW9uIiwiaXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXJWaWV3IiwicmVzdWx0IiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzT2JqZWN0IiwiaXNCb29sZWFuIiwiaXNQbGFpbk9iamVjdCIsInByb3RvdHlwZSIsImlzRGF0ZSIsImlzRmlsZSIsImlzQmxvYiIsImlzRmlsZUxpc3QiLCJpc1N0cmVhbSIsImlzRm9ybURhdGEiLCJraW5kIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJpc1JlYWRhYmxlU3RyZWFtIiwiaXNSZXF1ZXN0IiwiaXNSZXNwb25zZSIsImlzSGVhZGVycyIsInRyaW0iLCJmb3JFYWNoIiwib2JqIiwiYWxsT3duS2V5cyIsImkiLCJsIiwia2V5cyIsImxlbiIsImtleSIsImZpbmRLZXkiLCJfa2V5IiwiX2dsb2JhbCIsImlzQ29udGV4dERlZmluZWQiLCJjb250ZXh0IiwibWVyZ2UiLCJjYXNlbGVzcyIsImFzc2lnblZhbHVlIiwidGFyZ2V0S2V5IiwiZXh0ZW5kIiwic3RyaXBCT00iLCJjb250ZW50IiwiaW5oZXJpdHMiLCJjb25zdHJ1Y3RvciIsInN1cGVyQ29uc3RydWN0b3IiLCJwcm9wcyIsImRlc2NyaXB0b3JzIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsImZpbHRlciIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJlbmRzV2l0aCIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwibGFzdEluZGV4IiwidG9BcnJheSIsImFyciIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJmb3JFYWNoRW50cnkiLCJpdGVyYXRvciIsInBhaXIiLCJtYXRjaEFsbCIsInJlZ0V4cCIsIm1hdGNoZXMiLCJpc0hUTUxGb3JtIiwidG9DYW1lbENhc2UiLCJtIiwicDEiLCJwMiIsImhhc093blByb3BlcnR5IiwiaXNSZWdFeHAiLCJyZWR1Y2VEZXNjcmlwdG9ycyIsInJlZHVjZXIiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwicmV0IiwiZnJlZXplTWV0aG9kcyIsInRvT2JqZWN0U2V0IiwiYXJyYXlPclN0cmluZyIsImRlbGltaXRlciIsImRlZmluZSIsIm5vb3AiLCJ0b0Zpbml0ZU51bWJlciIsImRlZmF1bHRWYWx1ZSIsIkFMUEhBIiwiRElHSVQiLCJBTFBIQUJFVCIsImdlbmVyYXRlU3RyaW5nIiwiYWxwaGFiZXQiLCJsZW5ndGgiLCJpc1NwZWNDb21wbGlhbnRGb3JtIiwidG9KU09OT2JqZWN0Iiwic3RhY2siLCJ2aXNpdCIsInNvdXJjZSIsInJlZHVjZWRWYWx1ZSIsImlzQXN5bmNGbiIsImlzVGhlbmFibGUiLCJfc2V0SW1tZWRpYXRlIiwic2V0SW1tZWRpYXRlU3VwcG9ydGVkIiwicG9zdE1lc3NhZ2VTdXBwb3J0ZWQiLCJ0b2tlbiIsImNhbGxiYWNrcyIsImRhdGEiLCJjYiIsImFzYXAiLCJ1dGlscyQxIiwiQXhpb3NFcnJvciIsImNvZGUiLCJjb25maWciLCJyZXNwb25zZSIsInV0aWxzIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwiaHR0cEFkYXB0ZXIiLCJpc1Zpc2l0YWJsZSIsInJlbW92ZUJyYWNrZXRzIiwicmVuZGVyS2V5IiwicGF0aCIsImRvdHMiLCJpc0ZsYXRBcnJheSIsInByZWRpY2F0ZXMiLCJ0b0Zvcm1EYXRhIiwiZm9ybURhdGEiLCJvcHRpb25zIiwib3B0aW9uIiwibWV0YVRva2VucyIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsImluZGV4ZXMiLCJ1c2VCbG9iIiwiY29udmVydFZhbHVlIiwiZWwiLCJpbmRleCIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJlbmNvZGUiLCJjaGFyTWFwIiwibWF0Y2giLCJBeGlvc1VSTFNlYXJjaFBhcmFtcyIsInBhcmFtcyIsImVuY29kZXIiLCJfZW5jb2RlIiwiYnVpbGRVUkwiLCJ1cmwiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJoIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJwbGF0Zm9ybSQxIiwiaGFzQnJvd3NlckVudiIsIl9uYXZpZ2F0b3IiLCJoYXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYiLCJvcmlnaW4iLCJwbGF0Zm9ybSIsInRvVVJMRW5jb2RlZEZvcm0iLCJoZWxwZXJzIiwicGFyc2VQcm9wUGF0aCIsImFycmF5VG9PYmplY3QiLCJmb3JtRGF0YVRvSlNPTiIsImJ1aWxkUGF0aCIsImlzTnVtZXJpY0tleSIsImlzTGFzdCIsInN0cmluZ2lmeVNhZmVseSIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZSIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwiX0Zvcm1EYXRhIiwidHJhbnNpdGlvbmFsIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJKU09OUmVxdWVzdGVkIiwic3RyaWN0SlNPTlBhcnNpbmciLCJzdGF0dXMiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInBhcnNlSGVhZGVycyIsInJhd0hlYWRlcnMiLCJwYXJzZWQiLCJsaW5lIiwiJGludGVybmFscyIsIm5vcm1hbGl6ZUhlYWRlciIsImhlYWRlciIsIm5vcm1hbGl6ZVZhbHVlIiwicGFyc2VUb2tlbnMiLCJ0b2tlbnMiLCJ0b2tlbnNSRSIsImlzVmFsaWRIZWFkZXJOYW1lIiwibWF0Y2hIZWFkZXJWYWx1ZSIsImlzSGVhZGVyTmFtZUZpbHRlciIsImZvcm1hdEhlYWRlciIsInciLCJjaGFyIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3Nvck5hbWUiLCJtZXRob2ROYW1lIiwiYXJnMSIsImFyZzIiLCJhcmczIiwiQXhpb3NIZWFkZXJzIiwidmFsdWVPclJld3JpdGUiLCJyZXdyaXRlIiwic2VsZiIsInNldEhlYWRlciIsIl92YWx1ZSIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJzZXRIZWFkZXJzIiwibWF0Y2hlciIsImRlbGV0ZWQiLCJkZWxldGVIZWFkZXIiLCJmb3JtYXQiLCJub3JtYWxpemVkIiwidGFyZ2V0cyIsImFzU3RyaW5ncyIsImZpcnN0IiwiY29tcHV0ZWQiLCJhY2Nlc3NvcnMiLCJkZWZpbmVBY2Nlc3NvciIsIm1hcHBlZCIsImhlYWRlclZhbHVlIiwidHJhbnNmb3JtRGF0YSIsImZucyIsImlzQ2FuY2VsIiwiQ2FuY2VsZWRFcnJvciIsInNldHRsZSIsInZhbGlkYXRlU3RhdHVzIiwicGFyc2VQcm90b2NvbCIsInNwZWVkb21ldGVyIiwic2FtcGxlc0NvdW50IiwibWluIiwidGltZXN0YW1wcyIsImhlYWQiLCJ0YWlsIiwiZmlyc3RTYW1wbGVUUyIsImNodW5rTGVuZ3RoIiwibm93Iiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsInRocm90dGxlIiwiZnJlcSIsInRpbWVzdGFtcCIsInRocmVzaG9sZCIsImxhc3RBcmdzIiwidGltZXIiLCJpbnZva2UiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImxpc3RlbmVyIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwiaW5SYW5nZSIsInByb2dyZXNzRXZlbnREZWNvcmF0b3IiLCJ0aHJvdHRsZWQiLCJsZW5ndGhDb21wdXRhYmxlIiwiYXN5bmNEZWNvcmF0b3IiLCJpc1VSTFNhbWVPcmlnaW4iLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJvcmlnaW5VUkwiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInJlcXVlc3RVUkwiLCJjb29raWVzIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsImJ1aWxkRnVsbFBhdGgiLCJyZXF1ZXN0ZWRVUkwiLCJoZWFkZXJzVG9PYmplY3QiLCJtZXJnZUNvbmZpZyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsImNvbmZpZ1ZhbHVlIiwicmVzb2x2ZUNvbmZpZyIsIm5ld0NvbmZpZyIsIndpdGhYU1JGVG9rZW4iLCJ4c3JmSGVhZGVyTmFtZSIsInhzcmZDb29raWVOYW1lIiwiYXV0aCIsInhzcmZWYWx1ZSIsInhockFkYXB0ZXIiLCJfY29uZmlnIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlc3BvbnNlVHlwZSIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvbkNhbmNlbGVkIiwidXBsb2FkVGhyb3R0bGVkIiwiZG93bmxvYWRUaHJvdHRsZWQiLCJmbHVzaFVwbG9hZCIsImZsdXNoRG93bmxvYWQiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJlcnIiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiY2FuY2VsIiwicHJvdG9jb2wiLCJjb21wb3NlU2lnbmFscyIsInNpZ25hbHMiLCJ0aW1lb3V0IiwiY29udHJvbGxlciIsImFib3J0ZWQiLCJvbmFib3J0IiwicmVhc29uIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJzdHJlYW1DaHVuayIsImNodW5rIiwiY2h1bmtTaXplIiwicG9zIiwiZW5kIiwicmVhZEJ5dGVzIiwiaXRlcmFibGUiLCJyZWFkU3RyZWFtIiwic3RyZWFtIiwicmVhZGVyIiwidHJhY2tTdHJlYW0iLCJvblByb2dyZXNzIiwib25GaW5pc2giLCJfb25GaW5pc2giLCJsb2FkZWRCeXRlcyIsImlzRmV0Y2hTdXBwb3J0ZWQiLCJpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkIiwiZW5jb2RlVGV4dCIsInRlc3QiLCJzdXBwb3J0c1JlcXVlc3RTdHJlYW0iLCJkdXBsZXhBY2Nlc3NlZCIsImhhc0NvbnRlbnRUeXBlIiwiREVGQVVMVF9DSFVOS19TSVpFIiwic3VwcG9ydHNSZXNwb25zZVN0cmVhbSIsInJlc29sdmVycyIsInJlcyIsIl8iLCJnZXRCb2R5TGVuZ3RoIiwiYm9keSIsInJlc29sdmVCb2R5TGVuZ3RoIiwia25vd25BZGFwdGVycyIsImNhbmNlbFRva2VuIiwid2l0aENyZWRlbnRpYWxzIiwiZmV0Y2hPcHRpb25zIiwiY29tcG9zZWRTaWduYWwiLCJyZXF1ZXN0Q29udGVudExlbmd0aCIsIl9yZXF1ZXN0IiwiY29udGVudFR5cGVIZWFkZXIiLCJmbHVzaCIsImlzQ3JlZGVudGlhbHNTdXBwb3J0ZWQiLCJpc1N0cmVhbVJlc3BvbnNlIiwicmVzcG9uc2VDb250ZW50TGVuZ3RoIiwicmVzcG9uc2VEYXRhIiwicmVuZGVyUmVhc29uIiwiaXNSZXNvbHZlZEhhbmRsZSIsImFkYXB0ZXIiLCJhZGFwdGVycyIsIm5hbWVPckFkYXB0ZXIiLCJyZWplY3RlZFJlYXNvbnMiLCJyZWFzb25zIiwic3RhdGUiLCJzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsImRpc3BhdGNoUmVxdWVzdCIsIlZFUlNJT04iLCJ2YWxpZGF0b3JzIiwiZGVwcmVjYXRlZFdhcm5pbmdzIiwidmFsaWRhdG9ycyQxIiwidmFsaWRhdG9yIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJjb25maWdPclVybCIsImR1bW15IiwicGFyYW1zU2VyaWFsaXplciIsImNvbnRleHRIZWFkZXJzIiwicmVxdWVzdEludGVyY2VwdG9yQ2hhaW4iLCJzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiIsImNoYWluIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZnVsbFBhdGgiLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwiYWJvcnQiLCJzcHJlYWQiLCJpc0F4aW9zRXJyb3IiLCJwYXlsb2FkIiwiSHR0cFN0YXR1c0NvZGUiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImF4aW9zIiwicHJvbWlzZXMiLCJDb252ZXJzYXRpb24iLCJyb290RWwiLCJkaXYiLCJmb3JtIiwiaW5wdXQiLCJzYXZlZFVzZXJNZXNzYWdlIiwib3Blbk1lc3NhZ2VzIiwic2F2ZWRBc3Npc3RhbnRNZXNzYWdlIiwiciIsInNhdmVkTWVzc2FnZSIsImluaXRDb252ZXJzYXRpb24iLCJpc05ldyIsInNhdmVkQ29udmVyc2F0aW9uIiwiY29udmVyc2F0aW9uIiwiVXNlck1lc3NhZ2UiLCJSZWNlbnRDb252ZXJzYXRpb24iLCJ0aXRsZSIsIl9hIiwiQXNzaXN0YW50TWVzc2Fn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LEdBQUssR0FDaENrZSxFQUFRLEtBQUssYUFBYSxPQUFPLEdBQUssR0FHNUMsS0FBSyxVQUFZO0FBQUE7QUFBQSxtRUFFMENsZSxDQUFFO0FBQUE7QUFBQTtBQUFBO0FBQUEsNEJBSXpDa2UsQ0FBSztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLGVBU3pCQyxFQUFBLEtBQUssY0FBYyxZQUFZLElBQS9CLE1BQUFBLEVBQWtDLGlCQUFpQixRQUFTLElBQU0sQ0FDNUQzZixFQUFBLGFBQWEsT0FBT3dCLENBQUUsRUFDdkIsT0FBZSxPQUFPLG9CQUFvQixNQUFLLEdBVW5ELE9BQWUsS0FBSyxRQUFRLElBQUksQ0FDckMsQ0FDSixDQUlJLE1BQU1vZSxXQUF5QixXQUFZLENBQ3ZDLG1CQUFvQixDQUVoQixLQUFLLFVBQVk7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSwrQ0FPa0IsS0FBSyxTQUFTO0FBQUE7QUFBQTtBQUFBLFFBTWhELE9BQWUsS0FBSyxRQUFRLElBQUksQ0FDckMsQ0FDSixDQU9KLGVBQWUsT0FBTyxlQUFnQkosRUFBVyxFQUNqRCxlQUFlLE9BQU8sb0JBQXFCSSxFQUFnQixFQUMzRCxlQUFlLE9BQU8sc0JBQXVCSCxFQUFrQixFQ2hGL0QsS0FBSyxnQkFBZ0IsU0FBVSxDQUM3QixRQUFTLGVBQWdCamdCLEVBQWNxZ0IsRUFBa0IsQ0FDdkQsR0FBSXJnQixJQUFTLGtCQUFtQixDQUM5QnFnQixFQUFJLGVBQWUsRUFFbkIsTUFBTXRkLEVBQVcsTUFBTyxPQUFlLE9BQU8sYUFBYSxZQUFZLEVBQ2xFLEtBQUEsS0FBSyxPQUFRLGVBQWdCLENBQ2hDLFNBQUFBLENBQUEsQ0FDRCxDQUVILENBQ0YsQ0FDRixDQUFDLEVDWEQsUUFBUSxJQUFJLDBCQUEwQixFQUV0QyxNQUFNdWQsR0FBc0IsQ0FDeEIsS0FBTSxnQkFBaUIsQ0FDYixNQUFBbkIsRUFBUyxTQUFTLGNBQWMsMEJBQTBCLEVBQ2hFLEdBQUksQ0FBQ0EsRUFBUSxPQUNiQSxFQUFPLFVBQVksSUFDSSxNQUFNM2UsRUFBRyxhQUFhLEtBQUssR0FDcEMsSUFBSSxDQUFDM0MsRUFBRzZILElBQU0sQ0FDeEIsR0FBR0EsRUFBSSxFQUFHLE9BRUosTUFBQTBaLEVBQU0sU0FBUyxjQUFjLEtBQUssRUFDeENBLEVBQUksVUFBWSw0QkFBNEJ2aEIsRUFBRSxFQUFFLFlBQVlBLEVBQUUsS0FBSywyQkFDbkVzaEIsR0FBQSxNQUFBQSxFQUFRLFlBQVlDLEVBQUcsQ0FDMUIsQ0FDTCxDQUNKLEVBQ0MsT0FBZSxPQUFTLENBQUUsaUJBQUFRLEdBQWtCLG9CQUFBVSxLQUU1QyxTQUNFQSxHQUFvQixLQUFLIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyXX0=
